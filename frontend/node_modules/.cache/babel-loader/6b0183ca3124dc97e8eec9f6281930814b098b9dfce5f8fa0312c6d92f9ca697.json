{"ast":null,"code":"import _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n// Styles\nimport \"../../../src/components/VOverflowBtn/VOverflowBtn.sass\"; // Extensions\n\nimport VSelect from '../VSelect/VSelect';\nimport VAutocomplete from '../VAutocomplete';\nimport VTextField from '../VTextField/VTextField'; // Components\n\nimport VBtn from '../VBtn'; // Utilities\n\nimport { consoleWarn } from '../../util/console';\n/* @vue/component */\n\nexport default VAutocomplete.extend({\n  name: 'v-overflow-btn',\n  props: {\n    editable: Boolean,\n    segmented: Boolean\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread({}, VAutocomplete.options.computed.classes.call(this)), {}, {\n        'v-overflow-btn': true,\n        'v-overflow-btn--segmented': this.segmented,\n        'v-overflow-btn--editable': this.editable\n      });\n    },\n    isAnyValueAllowed: function isAnyValueAllowed() {\n      return this.editable || VAutocomplete.options.computed.isAnyValueAllowed.call(this);\n    },\n    isSingle: function isSingle() {\n      return true;\n    },\n    computedItems: function computedItems() {\n      return this.segmented ? this.allItems : this.filteredItems;\n    },\n    labelValue: function labelValue() {\n      return this.isFocused && !this.persistentPlaceholder || this.isLabelActive;\n    }\n  },\n  methods: {\n    genSelections: function genSelections() {\n      return this.editable ? VAutocomplete.options.methods.genSelections.call(this) : VSelect.options.methods.genSelections.call(this); // Override v-autocomplete's override\n    },\n    genCommaSelection: function genCommaSelection(item, index, last) {\n      return this.segmented ? this.genSegmentedBtn(item) : VSelect.options.methods.genCommaSelection.call(this, item, index, last);\n    },\n    genInput: function genInput() {\n      var input = VTextField.options.methods.genInput.call(this);\n      input.data = input.data || {};\n      input.data.domProps.value = this.editable ? this.internalSearch : '';\n      input.data.attrs.readonly = !this.isAnyValueAllowed;\n      return input;\n    },\n    genLabel: function genLabel() {\n      if (this.editable && this.isFocused) return null;\n      var label = VTextField.options.methods.genLabel.call(this);\n      if (!label) return label;\n      label.data = label.data || {}; // Reset previously set styles from parent\n\n      label.data.style = {};\n      return label;\n    },\n    genSegmentedBtn: function genSegmentedBtn(item) {\n      var _this = this;\n      var itemValue = this.getValue(item);\n      var itemObj = this.computedItems.find(function (i) {\n        return _this.getValue(i) === itemValue;\n      }) || item;\n      if (!itemObj.text || !itemObj.callback) {\n        consoleWarn('When using \"segmented\" prop without a selection slot, items must contain both a text and callback property', this);\n        return null;\n      }\n      return this.$createElement(VBtn, {\n        props: {\n          text: true\n        },\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            itemObj.callback(e);\n          }\n        }\n      }, [itemObj.text]);\n    },\n    updateValue: function updateValue(val) {\n      if (val) {\n        this.initialValue = this.lazyValue;\n      } else if (this.initialValue !== this.lazyValue) {\n        this.$emit('change', this.lazyValue);\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}