{"ast":null,"code":"import _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\n// Helpers\nimport { wrapInArray, sortItems, deepEqual, groupItems, searchItems, fillArray } from '../../util/helpers';\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'v-data',\n  inheritAttrs: false,\n  props: {\n    items: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    options: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    sortBy: {\n      type: [String, Array]\n    },\n    sortDesc: {\n      type: [Boolean, Array]\n    },\n    customSort: {\n      type: Function,\n      \"default\": sortItems\n    },\n    mustSort: Boolean,\n    multiSort: Boolean,\n    page: {\n      type: Number,\n      \"default\": 1\n    },\n    itemsPerPage: {\n      type: Number,\n      \"default\": 10\n    },\n    groupBy: {\n      type: [String, Array],\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    groupDesc: {\n      type: [Boolean, Array],\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    customGroup: {\n      type: Function,\n      \"default\": groupItems\n    },\n    locale: {\n      type: String,\n      \"default\": 'en-US'\n    },\n    disableSort: Boolean,\n    disablePagination: Boolean,\n    disableFiltering: Boolean,\n    search: String,\n    customFilter: {\n      type: Function,\n      \"default\": searchItems\n    },\n    serverItemsLength: {\n      type: Number,\n      \"default\": -1\n    }\n  },\n  data: function data() {\n    var internalOptions = {\n      page: this.page,\n      itemsPerPage: this.itemsPerPage,\n      sortBy: wrapInArray(this.sortBy),\n      sortDesc: wrapInArray(this.sortDesc),\n      groupBy: wrapInArray(this.groupBy),\n      groupDesc: wrapInArray(this.groupDesc),\n      mustSort: this.mustSort,\n      multiSort: this.multiSort\n    };\n    if (this.options) {\n      internalOptions = Object.assign(internalOptions, this.options);\n    }\n    var _internalOptions = internalOptions,\n      sortBy = _internalOptions.sortBy,\n      sortDesc = _internalOptions.sortDesc,\n      groupBy = _internalOptions.groupBy,\n      groupDesc = _internalOptions.groupDesc;\n    var sortDiff = sortBy.length - sortDesc.length;\n    var groupDiff = groupBy.length - groupDesc.length;\n    if (sortDiff > 0) {\n      var _internalOptions$sort;\n      (_internalOptions$sort = internalOptions.sortDesc).push.apply(_internalOptions$sort, _toConsumableArray(fillArray(sortDiff, false)));\n    }\n    if (groupDiff > 0) {\n      var _internalOptions$grou;\n      (_internalOptions$grou = internalOptions.groupDesc).push.apply(_internalOptions$grou, _toConsumableArray(fillArray(groupDiff, false)));\n    }\n    return {\n      internalOptions: internalOptions\n    };\n  },\n  computed: {\n    itemsLength: function itemsLength() {\n      return this.serverItemsLength >= 0 ? this.serverItemsLength : this.filteredItems.length;\n    },\n    pageCount: function pageCount() {\n      return this.internalOptions.itemsPerPage <= 0 ? 1 : Math.ceil(this.itemsLength / this.internalOptions.itemsPerPage);\n    },\n    pageStart: function pageStart() {\n      if (this.internalOptions.itemsPerPage === -1 || !this.items.length) return 0;\n      return (this.internalOptions.page - 1) * this.internalOptions.itemsPerPage;\n    },\n    pageStop: function pageStop() {\n      if (this.internalOptions.itemsPerPage === -1) return this.itemsLength;\n      if (!this.items.length) return 0;\n      return Math.min(this.itemsLength, this.internalOptions.page * this.internalOptions.itemsPerPage);\n    },\n    isGrouped: function isGrouped() {\n      return !!this.internalOptions.groupBy.length;\n    },\n    pagination: function pagination() {\n      return {\n        page: this.internalOptions.page,\n        itemsPerPage: this.internalOptions.itemsPerPage,\n        pageStart: this.pageStart,\n        pageStop: this.pageStop,\n        pageCount: this.pageCount,\n        itemsLength: this.itemsLength\n      };\n    },\n    filteredItems: function filteredItems() {\n      var items = this.items.slice();\n      if (!this.disableFiltering && this.serverItemsLength <= 0) {\n        items = this.customFilter(items, this.search);\n      }\n      return items;\n    },\n    computedItems: function computedItems() {\n      var items = this.filteredItems.slice();\n      if ((!this.disableSort || this.internalOptions.groupBy.length) && this.serverItemsLength <= 0) {\n        items = this.sortItems(items);\n      }\n      if (!this.disablePagination && this.serverItemsLength <= 0) {\n        items = this.paginateItems(items);\n      }\n      return items;\n    },\n    groupedItems: function groupedItems() {\n      return this.isGrouped ? this.groupItems(this.computedItems) : null;\n    },\n    scopedProps: function scopedProps() {\n      return {\n        sort: this.sort,\n        sortArray: this.sortArray,\n        group: this.group,\n        items: this.computedItems,\n        options: this.internalOptions,\n        updateOptions: this.updateOptions,\n        pagination: this.pagination,\n        groupedItems: this.groupedItems,\n        originalItemsLength: this.items.length\n      };\n    },\n    computedOptions: function computedOptions() {\n      return _objectSpread({}, this.options);\n    }\n  },\n  watch: {\n    computedOptions: {\n      handler: function handler(options, old) {\n        if (deepEqual(options, old)) return;\n        this.updateOptions(options);\n      },\n      deep: true,\n      immediate: true\n    },\n    internalOptions: {\n      handler: function handler(options, old) {\n        if (deepEqual(options, old)) return;\n        this.$emit('update:options', options);\n      },\n      deep: true,\n      immediate: true\n    },\n    page: function page(_page) {\n      this.updateOptions({\n        page: _page\n      });\n    },\n    'internalOptions.page': function internalOptionsPage(page) {\n      this.$emit('update:page', page);\n    },\n    itemsPerPage: function itemsPerPage(_itemsPerPage) {\n      this.updateOptions({\n        itemsPerPage: _itemsPerPage\n      });\n    },\n    'internalOptions.itemsPerPage': function internalOptionsItemsPerPage(itemsPerPage) {\n      this.$emit('update:items-per-page', itemsPerPage);\n    },\n    sortBy: function sortBy(_sortBy) {\n      this.updateOptions({\n        sortBy: wrapInArray(_sortBy)\n      });\n    },\n    'internalOptions.sortBy': function internalOptionsSortBy(sortBy, old) {\n      !deepEqual(sortBy, old) && this.$emit('update:sort-by', Array.isArray(this.sortBy) ? sortBy : sortBy[0]);\n    },\n    sortDesc: function sortDesc(_sortDesc) {\n      this.updateOptions({\n        sortDesc: wrapInArray(_sortDesc)\n      });\n    },\n    'internalOptions.sortDesc': function internalOptionsSortDesc(sortDesc, old) {\n      !deepEqual(sortDesc, old) && this.$emit('update:sort-desc', Array.isArray(this.sortDesc) ? sortDesc : sortDesc[0]);\n    },\n    groupBy: function groupBy(_groupBy) {\n      this.updateOptions({\n        groupBy: wrapInArray(_groupBy)\n      });\n    },\n    'internalOptions.groupBy': function internalOptionsGroupBy(groupBy, old) {\n      !deepEqual(groupBy, old) && this.$emit('update:group-by', Array.isArray(this.groupBy) ? groupBy : groupBy[0]);\n    },\n    groupDesc: function groupDesc(_groupDesc) {\n      this.updateOptions({\n        groupDesc: wrapInArray(_groupDesc)\n      });\n    },\n    'internalOptions.groupDesc': function internalOptionsGroupDesc(groupDesc, old) {\n      !deepEqual(groupDesc, old) && this.$emit('update:group-desc', Array.isArray(this.groupDesc) ? groupDesc : groupDesc[0]);\n    },\n    multiSort: function multiSort(_multiSort) {\n      this.updateOptions({\n        multiSort: _multiSort\n      });\n    },\n    'internalOptions.multiSort': function internalOptionsMultiSort(multiSort) {\n      this.$emit('update:multi-sort', multiSort);\n    },\n    mustSort: function mustSort(_mustSort) {\n      this.updateOptions({\n        mustSort: _mustSort\n      });\n    },\n    'internalOptions.mustSort': function internalOptionsMustSort(mustSort) {\n      this.$emit('update:must-sort', mustSort);\n    },\n    pageCount: {\n      handler: function handler(pageCount) {\n        this.$emit('page-count', pageCount);\n      },\n      immediate: true\n    },\n    computedItems: {\n      handler: function handler(computedItems) {\n        this.$emit('current-items', computedItems);\n      },\n      immediate: true\n    },\n    pagination: {\n      handler: function handler(pagination, old) {\n        if (deepEqual(pagination, old)) return;\n        this.$emit('pagination', this.pagination);\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    toggle: function toggle(key, oldBy, oldDesc, page, mustSort, multiSort) {\n      var by = oldBy.slice();\n      var desc = oldDesc.slice();\n      var byIndex = by.findIndex(function (k) {\n        return k === key;\n      });\n      if (byIndex < 0) {\n        if (!multiSort) {\n          by = [];\n          desc = [];\n        }\n        by.push(key);\n        desc.push(false);\n      } else if (byIndex >= 0 && !desc[byIndex]) {\n        desc[byIndex] = true;\n      } else if (!mustSort) {\n        by.splice(byIndex, 1);\n        desc.splice(byIndex, 1);\n      } else {\n        desc[byIndex] = false;\n      } // Reset page to 1 if sortBy or sortDesc have changed\n\n      if (!deepEqual(by, oldBy) || !deepEqual(desc, oldDesc)) {\n        page = 1;\n      }\n      return {\n        by: by,\n        desc: desc,\n        page: page\n      };\n    },\n    group: function group(key) {\n      var _this$toggle = this.toggle(key, this.internalOptions.groupBy, this.internalOptions.groupDesc, this.internalOptions.page, true, false),\n        groupBy = _this$toggle.by,\n        groupDesc = _this$toggle.desc,\n        page = _this$toggle.page;\n      this.updateOptions({\n        groupBy: groupBy,\n        groupDesc: groupDesc,\n        page: page\n      });\n    },\n    sort: function sort(key) {\n      if (Array.isArray(key)) return this.sortArray(key);\n      var _this$toggle2 = this.toggle(key, this.internalOptions.sortBy, this.internalOptions.sortDesc, this.internalOptions.page, this.internalOptions.mustSort, this.internalOptions.multiSort),\n        sortBy = _this$toggle2.by,\n        sortDesc = _this$toggle2.desc,\n        page = _this$toggle2.page;\n      this.updateOptions({\n        sortBy: sortBy,\n        sortDesc: sortDesc,\n        page: page\n      });\n    },\n    sortArray: function sortArray(sortBy) {\n      var _this = this;\n      var sortDesc = sortBy.map(function (s) {\n        var i = _this.internalOptions.sortBy.findIndex(function (k) {\n          return k === s;\n        });\n        return i > -1 ? _this.internalOptions.sortDesc[i] : false;\n      });\n      this.updateOptions({\n        sortBy: sortBy,\n        sortDesc: sortDesc\n      });\n    },\n    updateOptions: function updateOptions(options) {\n      this.internalOptions = _objectSpread(_objectSpread(_objectSpread({}, this.internalOptions), options), {}, {\n        page: this.serverItemsLength < 0 ? Math.max(1, Math.min(options.page || this.internalOptions.page, this.pageCount)) : options.page || this.internalOptions.page\n      });\n    },\n    sortItems: function sortItems(items) {\n      var sortBy = [];\n      var sortDesc = [];\n      if (!this.disableSort) {\n        sortBy = this.internalOptions.sortBy;\n        sortDesc = this.internalOptions.sortDesc;\n      }\n      if (this.internalOptions.groupBy.length) {\n        sortBy = [].concat(_toConsumableArray(this.internalOptions.groupBy), _toConsumableArray(sortBy));\n        sortDesc = [].concat(_toConsumableArray(this.internalOptions.groupDesc), _toConsumableArray(sortDesc));\n      }\n      return this.customSort(items, sortBy, sortDesc, this.locale);\n    },\n    groupItems: function groupItems(items) {\n      return this.customGroup(items, this.internalOptions.groupBy, this.internalOptions.groupDesc);\n    },\n    paginateItems: function paginateItems(items) {\n      // Make sure we don't try to display non-existant page if items suddenly change\n      // TODO: Could possibly move this to pageStart/pageStop?\n      if (this.serverItemsLength === -1 && items.length <= this.pageStart) {\n        this.internalOptions.page = Math.max(1, Math.ceil(items.length / this.internalOptions.itemsPerPage)) || 1; // Prevent NaN\n      }\n      return items.slice(this.pageStart, this.pageStop);\n    }\n  },\n  render: function render() {\n    return this.$scopedSlots[\"default\"] && this.$scopedSlots[\"default\"](this.scopedProps);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}