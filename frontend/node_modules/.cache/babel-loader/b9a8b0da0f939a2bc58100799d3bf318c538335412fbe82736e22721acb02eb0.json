{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"../../../src/components/VSlider/VSlider.sass\"; // Components\n\nimport VInput from '../VInput';\nimport { VScaleTransition } from '../transitions'; // Mixins\n\nimport mixins from '../../util/mixins';\nimport Loadable from '../../mixins/loadable'; // Directives\n\nimport ClickOutside from '../../directives/click-outside'; // Helpers\n\nimport { addOnceEventListener, deepEqual, keyCodes, createRange, convertToUnit, passiveSupported } from '../../util/helpers';\nimport { consoleWarn } from '../../util/console';\nexport default mixins(VInput, Loadable\n/* @vue/component */).extend({\n  name: 'v-slider',\n  directives: {\n    ClickOutside: ClickOutside\n  },\n  mixins: [Loadable],\n  props: {\n    disabled: Boolean,\n    inverseLabel: Boolean,\n    max: {\n      type: [Number, String],\n      \"default\": 100\n    },\n    min: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    step: {\n      type: [Number, String],\n      \"default\": 1\n    },\n    thumbColor: String,\n    thumbLabel: {\n      type: [Boolean, String],\n      \"default\": undefined,\n      validator: function validator(v) {\n        return typeof v === 'boolean' || v === 'always';\n      }\n    },\n    thumbSize: {\n      type: [Number, String],\n      \"default\": 32\n    },\n    tickLabels: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    ticks: {\n      type: [Boolean, String],\n      \"default\": false,\n      validator: function validator(v) {\n        return typeof v === 'boolean' || v === 'always';\n      }\n    },\n    tickSize: {\n      type: [Number, String],\n      \"default\": 2\n    },\n    trackColor: String,\n    trackFillColor: String,\n    value: [Number, String],\n    vertical: Boolean\n  },\n  data: function data() {\n    return {\n      app: null,\n      oldValue: null,\n      thumbPressed: false,\n      mouseTimeout: -1,\n      isFocused: false,\n      isActive: false,\n      noClick: false,\n      startOffset: 0\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread({}, VInput.options.computed.classes.call(this)), {}, {\n        'v-input__slider': true,\n        'v-input__slider--vertical': this.vertical,\n        'v-input__slider--inverse-label': this.inverseLabel\n      });\n    },\n    internalValue: {\n      get: function get() {\n        return this.lazyValue;\n      },\n      set: function set(val) {\n        val = isNaN(val) ? this.minValue : val; // Round value to ensure the\n        // entire slider range can\n        // be selected with step\n\n        var value = this.roundValue(Math.min(Math.max(val, this.minValue), this.maxValue));\n        if (value === this.lazyValue) return;\n        this.lazyValue = value;\n        this.$emit('input', value);\n      }\n    },\n    trackTransition: function trackTransition() {\n      return this.thumbPressed ? this.showTicks || this.stepNumeric ? '0.1s cubic-bezier(0.25, 0.8, 0.5, 1)' : 'none' : '';\n    },\n    minValue: function minValue() {\n      return parseFloat(this.min);\n    },\n    maxValue: function maxValue() {\n      return parseFloat(this.max);\n    },\n    stepNumeric: function stepNumeric() {\n      return this.step > 0 ? parseFloat(this.step) : 0;\n    },\n    inputWidth: function inputWidth() {\n      var inputWidth = (this.roundValue(this.internalValue) - this.minValue) / (this.maxValue - this.minValue) * 100;\n      return isNaN(inputWidth) ? 0 : inputWidth;\n    },\n    trackFillStyles: function trackFillStyles() {\n      var startDir = this.vertical ? 'bottom' : 'left';\n      var endDir = this.vertical ? 'top' : 'right';\n      var valueDir = this.vertical ? 'height' : 'width';\n      var start = this.$vuetify.rtl ? 'auto' : '0';\n      var end = this.$vuetify.rtl ? '0' : 'auto';\n      var value = this.isDisabled ? \"calc(\".concat(this.inputWidth, \"% - 10px)\") : \"\".concat(this.inputWidth, \"%\");\n      return _defineProperty(_defineProperty(_defineProperty({\n        transition: this.trackTransition\n      }, startDir, start), endDir, end), valueDir, value);\n    },\n    trackStyles: function trackStyles() {\n      var startDir = this.vertical ? this.$vuetify.rtl ? 'bottom' : 'top' : this.$vuetify.rtl ? 'left' : 'right';\n      var endDir = this.vertical ? 'height' : 'width';\n      var start = '0px';\n      var end = this.isDisabled ? \"calc(\".concat(100 - this.inputWidth, \"% - 10px)\") : \"calc(\".concat(100 - this.inputWidth, \"%)\");\n      return _defineProperty(_defineProperty({\n        transition: this.trackTransition\n      }, startDir, start), endDir, end);\n    },\n    showTicks: function showTicks() {\n      return this.tickLabels.length > 0 || !!(!this.isDisabled && this.stepNumeric && this.ticks);\n    },\n    numTicks: function numTicks() {\n      return Math.ceil((this.maxValue - this.minValue) / this.stepNumeric);\n    },\n    showThumbLabel: function showThumbLabel() {\n      return !this.isDisabled && !!(this.thumbLabel || this.$scopedSlots['thumb-label']);\n    },\n    computedTrackColor: function computedTrackColor() {\n      if (this.isDisabled) return undefined;\n      if (this.trackColor) return this.trackColor;\n      if (this.isDark) return this.validationState;\n      return this.validationState || 'primary lighten-3';\n    },\n    computedTrackFillColor: function computedTrackFillColor() {\n      if (this.isDisabled) return undefined;\n      if (this.trackFillColor) return this.trackFillColor;\n      return this.validationState || this.computedColor;\n    },\n    computedThumbColor: function computedThumbColor() {\n      if (this.thumbColor) return this.thumbColor;\n      return this.validationState || this.computedColor;\n    }\n  },\n  watch: {\n    min: function min(val) {\n      var parsed = parseFloat(val);\n      parsed > this.internalValue && this.$emit('input', parsed);\n    },\n    max: function max(val) {\n      var parsed = parseFloat(val);\n      parsed < this.internalValue && this.$emit('input', parsed);\n    },\n    value: {\n      handler: function handler(v) {\n        this.internalValue = v;\n      },\n      immediate: true\n    }\n  },\n  mounted: function mounted() {\n    // Without a v-app, iOS does not work with body selectors\n    this.app = document.querySelector('[data-app]') || consoleWarn('Missing v-app or a non-body wrapping element with the [data-app] attribute', this);\n  },\n  methods: {\n    genDefaultSlot: function genDefaultSlot() {\n      var children = [this.genLabel()];\n      var slider = this.genSlider();\n      this.inverseLabel ? children.unshift(slider) : children.push(slider);\n      children.push(this.genProgress());\n      return children;\n    },\n    genSlider: function genSlider() {\n      return this.$createElement('div', {\n        \"class\": _objectSpread({\n          'v-slider': true,\n          'v-slider--horizontal': !this.vertical,\n          'v-slider--vertical': this.vertical,\n          'v-slider--focused': this.isFocused,\n          'v-slider--active': this.isActive,\n          'v-slider--disabled': this.isDisabled,\n          'v-slider--readonly': this.isReadonly\n        }, this.themeClasses),\n        directives: [{\n          name: 'click-outside',\n          value: this.onBlur\n        }],\n        on: {\n          click: this.onSliderClick,\n          mousedown: this.onSliderMouseDown,\n          touchstart: this.onSliderMouseDown\n        }\n      }, this.genChildren());\n    },\n    genChildren: function genChildren() {\n      return [this.genInput(), this.genTrackContainer(), this.genSteps(), this.genThumbContainer(this.internalValue, this.inputWidth, this.isActive, this.isFocused, this.onFocus, this.onBlur)];\n    },\n    genInput: function genInput() {\n      return this.$createElement('input', {\n        attrs: _objectSpread({\n          value: this.internalValue,\n          id: this.computedId,\n          disabled: true,\n          readonly: true,\n          tabindex: -1\n        }, this.$attrs) // on: this.genListeners(), // TODO: do we need to attach the listeners to input?\n      });\n    },\n    genTrackContainer: function genTrackContainer() {\n      var children = [this.$createElement('div', this.setBackgroundColor(this.computedTrackColor, {\n        staticClass: 'v-slider__track-background',\n        style: this.trackStyles\n      })), this.$createElement('div', this.setBackgroundColor(this.computedTrackFillColor, {\n        staticClass: 'v-slider__track-fill',\n        style: this.trackFillStyles\n      }))];\n      return this.$createElement('div', {\n        staticClass: 'v-slider__track-container',\n        ref: 'track'\n      }, children);\n    },\n    genSteps: function genSteps() {\n      var _this = this;\n      if (!this.step || !this.showTicks) return null;\n      var tickSize = parseFloat(this.tickSize);\n      var range = createRange(this.numTicks + 1);\n      var direction = this.vertical ? 'bottom' : this.$vuetify.rtl ? 'right' : 'left';\n      var offsetDirection = this.vertical ? this.$vuetify.rtl ? 'left' : 'right' : 'top';\n      if (this.vertical) range.reverse();\n      var ticks = range.map(function (index) {\n        var children = [];\n        if (_this.tickLabels[index]) {\n          children.push(_this.$createElement('div', {\n            staticClass: 'v-slider__tick-label'\n          }, _this.tickLabels[index]));\n        }\n        var width = index * (100 / _this.numTicks);\n        var filled = _this.$vuetify.rtl ? 100 - _this.inputWidth < width : width < _this.inputWidth;\n        return _this.$createElement('span', {\n          key: index,\n          staticClass: 'v-slider__tick',\n          \"class\": {\n            'v-slider__tick--filled': filled\n          },\n          style: _defineProperty(_defineProperty({\n            width: \"\".concat(tickSize, \"px\"),\n            height: \"\".concat(tickSize, \"px\")\n          }, direction, \"calc(\".concat(width, \"% - \").concat(tickSize / 2, \"px)\")), offsetDirection, \"calc(50% - \".concat(tickSize / 2, \"px)\"))\n        }, children);\n      });\n      return this.$createElement('div', {\n        staticClass: 'v-slider__ticks-container',\n        \"class\": {\n          'v-slider__ticks-container--always-show': this.ticks === 'always' || this.tickLabels.length > 0\n        }\n      }, ticks);\n    },\n    genThumbContainer: function genThumbContainer(value, valueWidth, isActive, isFocused, onFocus, onBlur) {\n      var ref = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'thumb';\n      var children = [this.genThumb()];\n      var thumbLabelContent = this.genThumbLabelContent(value);\n      this.showThumbLabel && children.push(this.genThumbLabel(thumbLabelContent));\n      return this.$createElement('div', this.setTextColor(this.computedThumbColor, {\n        ref: ref,\n        key: ref,\n        staticClass: 'v-slider__thumb-container',\n        \"class\": {\n          'v-slider__thumb-container--active': isActive,\n          'v-slider__thumb-container--focused': isFocused,\n          'v-slider__thumb-container--show-label': this.showThumbLabel\n        },\n        style: this.getThumbContainerStyles(valueWidth),\n        attrs: {\n          role: 'slider',\n          tabindex: this.isDisabled ? -1 : this.$attrs.tabindex ? this.$attrs.tabindex : 0,\n          'aria-label': this.$attrs['aria-label'] || this.label,\n          'aria-valuemin': this.min,\n          'aria-valuemax': this.max,\n          'aria-valuenow': this.internalValue,\n          'aria-readonly': String(this.isReadonly),\n          'aria-orientation': this.vertical ? 'vertical' : 'horizontal'\n        },\n        on: {\n          focus: onFocus,\n          blur: onBlur,\n          keydown: this.onKeyDown\n        }\n      }), children);\n    },\n    genThumbLabelContent: function genThumbLabelContent(value) {\n      return this.$scopedSlots['thumb-label'] ? this.$scopedSlots['thumb-label']({\n        value: value\n      }) : [this.$createElement('span', [String(value)])];\n    },\n    genThumbLabel: function genThumbLabel(content) {\n      var size = convertToUnit(this.thumbSize);\n      var transform = this.vertical ? \"translateY(20%) translateY(\".concat(Number(this.thumbSize) / 3 - 1, \"px) translateX(55%) rotate(135deg)\") : \"translateY(-20%) translateY(-12px) translateX(-50%) rotate(45deg)\";\n      return this.$createElement(VScaleTransition, {\n        props: {\n          origin: 'bottom center'\n        }\n      }, [this.$createElement('div', {\n        staticClass: 'v-slider__thumb-label-container',\n        directives: [{\n          name: 'show',\n          value: this.isFocused || this.isActive || this.thumbLabel === 'always'\n        }]\n      }, [this.$createElement('div', this.setBackgroundColor(this.computedThumbColor, {\n        staticClass: 'v-slider__thumb-label',\n        style: {\n          height: size,\n          width: size,\n          transform: transform\n        }\n      }), [this.$createElement('div', content)])])]);\n    },\n    genThumb: function genThumb() {\n      return this.$createElement('div', this.setBackgroundColor(this.computedThumbColor, {\n        staticClass: 'v-slider__thumb'\n      }));\n    },\n    getThumbContainerStyles: function getThumbContainerStyles(width) {\n      var direction = this.vertical ? 'top' : 'left';\n      var value = this.$vuetify.rtl ? 100 - width : width;\n      value = this.vertical ? 100 - value : value;\n      return _defineProperty({\n        transition: this.trackTransition\n      }, direction, \"\".concat(value, \"%\"));\n    },\n    onSliderMouseDown: function onSliderMouseDown(e) {\n      var _this2 = this;\n      var _a;\n      e.preventDefault();\n      this.oldValue = this.internalValue;\n      this.isActive = true;\n      if ((_a = e.target) === null || _a === void 0 ? void 0 : _a.matches('.v-slider__thumb-container, .v-slider__thumb-container *')) {\n        this.thumbPressed = true;\n        var domRect = e.target.getBoundingClientRect();\n        var touch = 'touches' in e ? e.touches[0] : e;\n        this.startOffset = this.vertical ? touch.clientY - (domRect.top + domRect.height / 2) : touch.clientX - (domRect.left + domRect.width / 2);\n      } else {\n        this.startOffset = 0;\n        window.clearTimeout(this.mouseTimeout);\n        this.mouseTimeout = window.setTimeout(function () {\n          _this2.thumbPressed = true;\n        }, 300);\n      }\n      var mouseUpOptions = passiveSupported ? {\n        passive: true,\n        capture: true\n      } : true;\n      var mouseMoveOptions = passiveSupported ? {\n        passive: true\n      } : false;\n      var isTouchEvent = 'touches' in e;\n      this.onMouseMove(e);\n      this.app.addEventListener(isTouchEvent ? 'touchmove' : 'mousemove', this.onMouseMove, mouseMoveOptions);\n      addOnceEventListener(this.app, isTouchEvent ? 'touchend' : 'mouseup', this.onSliderMouseUp, mouseUpOptions);\n      this.$emit('start', this.internalValue);\n    },\n    onSliderMouseUp: function onSliderMouseUp(e) {\n      e.stopPropagation();\n      window.clearTimeout(this.mouseTimeout);\n      this.thumbPressed = false;\n      var mouseMoveOptions = passiveSupported ? {\n        passive: true\n      } : false;\n      this.app.removeEventListener('touchmove', this.onMouseMove, mouseMoveOptions);\n      this.app.removeEventListener('mousemove', this.onMouseMove, mouseMoveOptions);\n      this.$emit('mouseup', e);\n      this.$emit('end', this.internalValue);\n      if (!deepEqual(this.oldValue, this.internalValue)) {\n        this.$emit('change', this.internalValue);\n        this.noClick = true;\n      }\n      this.isActive = false;\n    },\n    onMouseMove: function onMouseMove(e) {\n      if (e.type === 'mousemove') {\n        this.thumbPressed = true;\n      }\n      this.internalValue = this.parseMouseMove(e);\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (!this.isInteractive) return;\n      var value = this.parseKeyDown(e, this.internalValue);\n      if (value == null || value < this.minValue || value > this.maxValue) return;\n      this.internalValue = value;\n      this.$emit('change', value);\n    },\n    onSliderClick: function onSliderClick(e) {\n      if (this.noClick) {\n        this.noClick = false;\n        return;\n      }\n      var thumb = this.$refs.thumb;\n      thumb.focus();\n      this.onMouseMove(e);\n      this.$emit('change', this.internalValue);\n    },\n    onBlur: function onBlur(e) {\n      this.isFocused = false;\n      this.$emit('blur', e);\n    },\n    onFocus: function onFocus(e) {\n      this.isFocused = true;\n      this.$emit('focus', e);\n    },\n    parseMouseMove: function parseMouseMove(e) {\n      var start = this.vertical ? 'top' : 'left';\n      var length = this.vertical ? 'height' : 'width';\n      var click = this.vertical ? 'clientY' : 'clientX';\n      var _this$$refs$track$get = this.$refs.track.getBoundingClientRect(),\n        trackStart = _this$$refs$track$get[start],\n        trackLength = _this$$refs$track$get[length];\n      var clickOffset = 'touches' in e ? e.touches[0][click] : e[click]; // It is possible for left to be NaN, force to number\n\n      var clickPos = Math.min(Math.max((clickOffset - trackStart - this.startOffset) / trackLength, 0), 1) || 0;\n      if (this.vertical) clickPos = 1 - clickPos;\n      if (this.$vuetify.rtl) clickPos = 1 - clickPos;\n      return parseFloat(this.min) + clickPos * (this.maxValue - this.minValue);\n    },\n    parseKeyDown: function parseKeyDown(e, value) {\n      if (!this.isInteractive) return;\n      var pageup = keyCodes.pageup,\n        pagedown = keyCodes.pagedown,\n        end = keyCodes.end,\n        home = keyCodes.home,\n        left = keyCodes.left,\n        right = keyCodes.right,\n        down = keyCodes.down,\n        up = keyCodes.up;\n      if (![pageup, pagedown, end, home, left, right, down, up].includes(e.keyCode)) return;\n      e.preventDefault();\n      var step = this.stepNumeric || 1;\n      var steps = (this.maxValue - this.minValue) / step;\n      if ([left, right, down, up].includes(e.keyCode)) {\n        var increase = this.$vuetify.rtl ? [left, up] : [right, up];\n        var direction = increase.includes(e.keyCode) ? 1 : -1;\n        var multiplier = e.shiftKey ? 3 : e.ctrlKey ? 2 : 1;\n        value = value + direction * step * multiplier;\n      } else if (e.keyCode === home) {\n        value = this.minValue;\n      } else if (e.keyCode === end) {\n        value = this.maxValue;\n      } else {\n        var _direction = e.keyCode === pagedown ? 1 : -1;\n        value = value - _direction * step * (steps > 100 ? steps / 10 : 10);\n      }\n      return value;\n    },\n    roundValue: function roundValue(value) {\n      if (!this.stepNumeric) return value; // Format input value using the same number\n      // of decimals places as in the step prop\n\n      var trimmedStep = this.step.toString().trim();\n      var decimals = trimmedStep.indexOf('.') > -1 ? trimmedStep.length - trimmedStep.indexOf('.') - 1 : 0;\n      var offset = this.minValue % this.stepNumeric;\n      var newValue = Math.round((value - offset) / this.stepNumeric) * this.stepNumeric + offset;\n      return parseFloat(Math.min(newValue, this.maxValue).toFixed(decimals));\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}