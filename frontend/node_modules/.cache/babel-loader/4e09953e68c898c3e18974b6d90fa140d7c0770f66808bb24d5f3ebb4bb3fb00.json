{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n// Components\nimport { VExpandTransition } from '../transitions';\nimport { VIcon } from '../VIcon'; // Mixins\n\nimport { inject as RegistrableInject } from '../../mixins/registrable';\nimport Colorable from '../../mixins/colorable'; // Utils\n\nimport mixins from '../../util/mixins';\nimport { getObjectValueByPath, createRange } from '../../util/helpers';\nvar baseMixins = mixins(Colorable, RegistrableInject('treeview'));\nexport var VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    \"default\": 'v-treeview-node--active'\n  },\n  color: {\n    type: String,\n    \"default\": 'primary'\n  },\n  disablePerNode: Boolean,\n  expandIcon: {\n    type: String,\n    \"default\": '$subgroup'\n  },\n  indeterminateIcon: {\n    type: String,\n    \"default\": '$checkboxIndeterminate'\n  },\n  itemChildren: {\n    type: String,\n    \"default\": 'children'\n  },\n  itemDisabled: {\n    type: String,\n    \"default\": 'disabled'\n  },\n  itemKey: {\n    type: String,\n    \"default\": 'id'\n  },\n  itemText: {\n    type: String,\n    \"default\": 'name'\n  },\n  loadChildren: Function,\n  loadingIcon: {\n    type: String,\n    \"default\": '$loading'\n  },\n  offIcon: {\n    type: String,\n    \"default\": '$checkboxOff'\n  },\n  onIcon: {\n    type: String,\n    \"default\": '$checkboxOn'\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    \"default\": 'accent'\n  },\n  shaped: Boolean,\n  transition: Boolean,\n  selectionType: {\n    type: String,\n    \"default\": 'leaf',\n    validator: function validator(v) {\n      return ['leaf', 'independent'].includes(v);\n    }\n  }\n};\n/* @vue/component */\n\nvar VTreeviewNode = baseMixins.extend().extend({\n  name: 'v-treeview-node',\n  inject: {\n    treeview: {\n      \"default\": null\n    }\n  },\n  props: _objectSpread({\n    level: Number,\n    item: {\n      type: Object,\n      \"default\": function _default() {\n        return null;\n      }\n    },\n    parentIsDisabled: Boolean\n  }, VTreeviewNodeProps),\n  data: function data() {\n    return {\n      hasLoaded: false,\n      isActive: false,\n      isIndeterminate: false,\n      isLoading: false,\n      isOpen: false,\n      isSelected: false // Node is selected (checkbox)\n    };\n  },\n  computed: {\n    disabled: function disabled() {\n      return getObjectValueByPath(this.item, this.itemDisabled) || !this.disablePerNode && this.parentIsDisabled && this.selectionType === 'leaf';\n    },\n    key: function key() {\n      return getObjectValueByPath(this.item, this.itemKey);\n    },\n    children: function children() {\n      var _this = this;\n      var children = getObjectValueByPath(this.item, this.itemChildren);\n      return children && children.filter(function (child) {\n        return !_this.treeview.isExcluded(getObjectValueByPath(child, _this.itemKey));\n      });\n    },\n    text: function text() {\n      return getObjectValueByPath(this.item, this.itemText);\n    },\n    scopedProps: function scopedProps() {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen\n      };\n    },\n    computedIcon: function computedIcon() {\n      if (this.isIndeterminate) return this.indeterminateIcon;else if (this.isSelected) return this.onIcon;else return this.offIcon;\n    },\n    hasChildren: function hasChildren() {\n      return !!this.children && (!!this.children.length || !!this.loadChildren);\n    }\n  },\n  created: function created() {\n    this.treeview.register(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.treeview.unregister(this);\n  },\n  methods: {\n    checkChildren: function checkChildren() {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!_this2.children || _this2.children.length || !_this2.loadChildren || _this2.hasLoaded) return resolve();\n        _this2.isLoading = true;\n        resolve(_this2.loadChildren(_this2.item));\n      }).then(function () {\n        _this2.isLoading = false;\n        _this2.hasLoaded = true;\n      });\n    },\n    open: function open() {\n      this.isOpen = !this.isOpen;\n      this.treeview.updateOpen(this.key, this.isOpen);\n      this.treeview.emitOpen();\n    },\n    genLabel: function genLabel() {\n      var children = [];\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps));else children.push(this.text);\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label'\n      }, children);\n    },\n    genPrependSlot: function genPrependSlot() {\n      if (!this.$scopedSlots.prepend) return null;\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__prepend'\n      }, this.$scopedSlots.prepend(this.scopedProps));\n    },\n    genAppendSlot: function genAppendSlot() {\n      if (!this.$scopedSlots.append) return null;\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__append'\n      }, this.$scopedSlots.append(this.scopedProps));\n    },\n    genContent: function genContent() {\n      var children = [this.genPrependSlot(), this.genLabel(), this.genAppendSlot()];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content'\n      }, children);\n    },\n    genToggle: function genToggle() {\n      var _this3 = this;\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        \"class\": {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading\n        },\n        slot: 'prepend',\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            if (_this3.isLoading) return;\n            _this3.checkChildren().then(function () {\n              return _this3.open();\n            });\n          }\n        }\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon]);\n    },\n    genCheckbox: function genCheckbox() {\n      var _this4 = this;\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected || this.isIndeterminate ? this.selectedColor : undefined,\n          disabled: this.disabled\n        },\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            if (_this4.isLoading) return;\n            _this4.checkChildren().then(function () {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              _this4.$nextTick(function () {\n                _this4.isSelected = !_this4.isSelected;\n                _this4.isIndeterminate = false;\n                _this4.treeview.updateSelected(_this4.key, _this4.isSelected);\n                _this4.treeview.emitSelected();\n              });\n            });\n          }\n        }\n      }, [this.computedIcon]);\n    },\n    genLevel: function genLevel(level) {\n      var _this5 = this;\n      return createRange(level).map(function () {\n        return _this5.$createElement('div', {\n          staticClass: 'v-treeview-node__level'\n        });\n      });\n    },\n    genNode: function genNode() {\n      var _this6 = this;\n      var children = [this.genContent()];\n      if (this.selectable) children.unshift(this.genCheckbox());\n      if (this.hasChildren) {\n        children.unshift(this.genToggle());\n      } else {\n        children.unshift.apply(children, _toConsumableArray(this.genLevel(1)));\n      }\n      children.unshift.apply(children, _toConsumableArray(this.genLevel(this.level)));\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        \"class\": _defineProperty({}, this.activeClass, this.isActive),\n        on: {\n          click: function click() {\n            if (_this6.openOnClick && _this6.hasChildren) {\n              _this6.checkChildren().then(_this6.open);\n            } else if (_this6.activatable && !_this6.disabled) {\n              _this6.isActive = !_this6.isActive;\n              _this6.treeview.updateActive(_this6.key, _this6.isActive);\n              _this6.treeview.emitActive();\n            }\n          }\n        }\n      }), children);\n    },\n    genChild: function genChild(item, parentIsDisabled) {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item: item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          disablePerNode: this.disablePerNode,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped,\n          level: this.level + 1,\n          selectionType: this.selectionType,\n          parentIsDisabled: parentIsDisabled\n        },\n        scopedSlots: this.$scopedSlots\n      });\n    },\n    genChildrenWrapper: function genChildrenWrapper() {\n      var _this7 = this;\n      if (!this.isOpen || !this.children) return null;\n      var children = [this.children.map(function (c) {\n        return _this7.genChild(c, _this7.disabled);\n      })];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children'\n      }, children);\n    },\n    genTransition: function genTransition() {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()]);\n    }\n  },\n  render: function render(h) {\n    var children = [this.genNode()];\n    if (this.transition) children.push(this.genTransition());else children.push(this.genChildrenWrapper());\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      \"class\": {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen)\n      }\n    }, children);\n  }\n});\nexport default VTreeviewNode;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}