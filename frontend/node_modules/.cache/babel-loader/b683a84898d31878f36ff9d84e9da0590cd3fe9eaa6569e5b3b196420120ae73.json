{"ast":null,"code":"import _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// Styles\nimport \"../../../src/components/VList/VListItem.sass\"; // Mixins\n\nimport Colorable from '../../mixins/colorable';\nimport Routable from '../../mixins/routable';\nimport { factory as GroupableFactory } from '../../mixins/groupable';\nimport Themeable from '../../mixins/themeable';\nimport { factory as ToggleableFactory } from '../../mixins/toggleable'; // Directives\n\nimport Ripple from '../../directives/ripple'; // Utilities\n\nimport { keyCodes } from './../../util/helpers';\nimport { removed } from '../../util/console'; // Types\n\nimport mixins from '../../util/mixins';\nvar baseMixins = mixins(Colorable, Routable, Themeable, GroupableFactory('listItemGroup'), ToggleableFactory('inputValue'));\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-list-item',\n  directives: {\n    Ripple: Ripple\n  },\n  inject: {\n    isInGroup: {\n      \"default\": false\n    },\n    isInList: {\n      \"default\": false\n    },\n    isInMenu: {\n      \"default\": false\n    },\n    isInNav: {\n      \"default\": false\n    }\n  },\n  inheritAttrs: false,\n  props: {\n    activeClass: {\n      type: String,\n      \"default\": function _default() {\n        if (!this.listItemGroup) return '';\n        return this.listItemGroup.activeClass;\n      }\n    },\n    dense: Boolean,\n    inactive: Boolean,\n    link: Boolean,\n    selectable: {\n      type: Boolean\n    },\n    tag: {\n      type: String,\n      \"default\": 'div'\n    },\n    threeLine: Boolean,\n    twoLine: Boolean,\n    value: null\n  },\n  data: function data() {\n    return {\n      proxyClass: 'v-list-item--active'\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread({\n        'v-list-item': true\n      }, Routable.options.computed.classes.call(this)), {}, {\n        'v-list-item--dense': this.dense,\n        'v-list-item--disabled': this.disabled,\n        'v-list-item--link': this.isClickable && !this.inactive,\n        'v-list-item--selectable': this.selectable,\n        'v-list-item--three-line': this.threeLine,\n        'v-list-item--two-line': this.twoLine\n      }, this.themeClasses);\n    },\n    isClickable: function isClickable() {\n      return Boolean(Routable.options.computed.isClickable.call(this) || this.listItemGroup);\n    }\n  },\n  created: function created() {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('avatar')) {\n      removed('avatar', this);\n    }\n  },\n  methods: {\n    click: function click(e) {\n      if (e.detail) this.$el.blur();\n      this.$emit('click', e);\n      this.to || this.toggle();\n    },\n    genAttrs: function genAttrs() {\n      var attrs = _objectSpread({\n        'aria-disabled': this.disabled ? true : undefined,\n        tabindex: this.isClickable && !this.disabled ? 0 : -1\n      }, this.$attrs);\n      if (this.$attrs.hasOwnProperty('role')) {// do nothing, role already provided\n      } else if (this.isInNav) {// do nothing, role is inherit\n      } else if (this.isInGroup) {\n        attrs.role = 'option';\n        attrs['aria-selected'] = String(this.isActive);\n      } else if (this.isInMenu) {\n        attrs.role = this.isClickable ? 'menuitem' : undefined;\n        attrs.id = attrs.id || \"list-item-\".concat(this._uid);\n      } else if (this.isInList) {\n        attrs.role = 'listitem';\n      }\n      return attrs;\n    },\n    toggle: function toggle() {\n      if (this.to && this.inputValue === undefined) {\n        this.isActive = !this.isActive;\n      }\n      this.$emit('change');\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n    var _this$generateRouteLi = this.generateRouteLink(),\n      tag = _this$generateRouteLi.tag,\n      data = _this$generateRouteLi.data;\n    data.attrs = _objectSpread(_objectSpread({}, data.attrs), this.genAttrs());\n    data[this.to ? 'nativeOn' : 'on'] = _objectSpread(_objectSpread({}, data[this.to ? 'nativeOn' : 'on']), {}, {\n      keydown: function keydown(e) {\n        if (!_this.disabled) {\n          /* istanbul ignore else */\n          if (e.keyCode === keyCodes.enter) _this.click(e);\n          _this.$emit('keydown', e);\n        }\n      }\n    });\n    if (this.inactive) tag = 'div';\n    if (this.inactive && this.to) {\n      data.on = data.nativeOn;\n      delete data.nativeOn;\n    }\n    var children = this.$scopedSlots[\"default\"] ? this.$scopedSlots[\"default\"]({\n      active: this.isActive,\n      toggle: this.toggle\n    }) : this.$slots[\"default\"];\n    return h(tag, this.isActive ? this.setTextColor(this.color, data) : data, children);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}