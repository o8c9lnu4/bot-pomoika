{"ast":null,"code":"import _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.includes.js\";\n// Styles\nimport \"../../../src/components/VColorPicker/VColorPicker.sass\"; // Components\n\nimport VSheet from '../VSheet/VSheet';\nimport VColorPickerPreview from './VColorPickerPreview';\nimport VColorPickerCanvas from './VColorPickerCanvas';\nimport VColorPickerEdit, { modes } from './VColorPickerEdit';\nimport VColorPickerSwatches from './VColorPickerSwatches'; // Helpers\n\nimport { parseColor, fromRGBA, extractColor, hasAlpha } from './util';\nimport mixins from '../../util/mixins';\nimport { deepEqual } from '../../util/helpers'; // Mixins\n\nimport Elevatable from '../../mixins/elevatable';\nimport Themeable from '../../mixins/themeable';\nexport default mixins(Elevatable, Themeable).extend({\n  name: 'v-color-picker',\n  props: {\n    canvasHeight: {\n      type: [String, Number],\n      \"default\": 150\n    },\n    disabled: Boolean,\n    dotSize: {\n      type: [Number, String],\n      \"default\": 10\n    },\n    flat: Boolean,\n    hideCanvas: Boolean,\n    hideSliders: Boolean,\n    hideInputs: Boolean,\n    hideModeSwitch: Boolean,\n    mode: {\n      type: String,\n      \"default\": 'rgba',\n      validator: function validator(v) {\n        return Object.keys(modes).includes(v);\n      }\n    },\n    showSwatches: Boolean,\n    swatches: Array,\n    swatchesMaxHeight: {\n      type: [Number, String],\n      \"default\": 150\n    },\n    value: {\n      type: [Object, String]\n    },\n    width: {\n      type: [Number, String],\n      \"default\": 300\n    }\n  },\n  data: function data() {\n    return {\n      internalValue: fromRGBA({\n        r: 255,\n        g: 0,\n        b: 0,\n        a: 1\n      })\n    };\n  },\n  computed: {\n    hideAlpha: function hideAlpha() {\n      if (!this.value) return false;\n      return !hasAlpha(this.value);\n    }\n  },\n  watch: {\n    value: {\n      handler: function handler(color) {\n        this.updateColor(parseColor(color, this.internalValue));\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    updateColor: function updateColor(color) {\n      this.internalValue = color;\n      var value = extractColor(this.internalValue, this.value);\n      if (!deepEqual(value, this.value)) {\n        this.$emit('input', value);\n        this.$emit('update:color', this.internalValue);\n      }\n    },\n    genCanvas: function genCanvas() {\n      return this.$createElement(VColorPickerCanvas, {\n        props: {\n          color: this.internalValue,\n          disabled: this.disabled,\n          dotSize: this.dotSize,\n          width: this.width,\n          height: this.canvasHeight\n        },\n        on: {\n          'update:color': this.updateColor\n        }\n      });\n    },\n    genControls: function genControls() {\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__controls'\n      }, [!this.hideSliders && this.genPreview(), !this.hideInputs && this.genEdit()]);\n    },\n    genEdit: function genEdit() {\n      var _this = this;\n      return this.$createElement(VColorPickerEdit, {\n        props: {\n          color: this.internalValue,\n          disabled: this.disabled,\n          hideAlpha: this.hideAlpha,\n          hideModeSwitch: this.hideModeSwitch,\n          mode: this.mode\n        },\n        on: {\n          'update:color': this.updateColor,\n          'update:mode': function updateMode(v) {\n            return _this.$emit('update:mode', v);\n          }\n        }\n      });\n    },\n    genPreview: function genPreview() {\n      return this.$createElement(VColorPickerPreview, {\n        props: {\n          color: this.internalValue,\n          disabled: this.disabled,\n          hideAlpha: this.hideAlpha\n        },\n        on: {\n          'update:color': this.updateColor\n        }\n      });\n    },\n    genSwatches: function genSwatches() {\n      return this.$createElement(VColorPickerSwatches, {\n        props: {\n          dark: this.dark,\n          light: this.light,\n          disabled: this.disabled,\n          swatches: this.swatches,\n          color: this.internalValue,\n          maxHeight: this.swatchesMaxHeight\n        },\n        on: {\n          'update:color': this.updateColor\n        }\n      });\n    }\n  },\n  render: function render(h) {\n    return h(VSheet, {\n      staticClass: 'v-color-picker',\n      \"class\": _objectSpread(_objectSpread({\n        'v-color-picker--flat': this.flat\n      }, this.themeClasses), this.elevationClasses),\n      props: {\n        maxWidth: this.width\n      }\n    }, [!this.hideCanvas && this.genCanvas(), (!this.hideSliders || !this.hideInputs) && this.genControls(), this.showSwatches && this.genSwatches()]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}