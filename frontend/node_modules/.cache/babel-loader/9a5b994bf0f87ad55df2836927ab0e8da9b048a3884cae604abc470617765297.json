{"ast":null,"code":"import _typeof from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _regeneratorRuntime from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nexport default {\n  name: 'AdminPosts',\n  data: function data() {\n    return {\n      loading: false,\n      posts: [],\n      dialog: false,\n      deleteDialog: false,\n      isEdit: false,\n      valid: false,\n      postToDelete: null,\n      postForm: {\n        title: '',\n        content: '',\n        image_url: '',\n        published: false\n      },\n      titleRules: [function (v) {\n        return !!v || 'Заголовок обязателен';\n      }, function (v) {\n        return v && v.length >= 3 || 'Заголовок должен содержать минимум 3 символа';\n      }],\n      contentRules: [function (v) {\n        return !!v || 'Содержание обязательно';\n      }, function (v) {\n        return v && v.length >= 10 || 'Содержание должно содержать минимум 10 символов';\n      }],\n      headers: [{\n        text: 'ID',\n        value: 'id',\n        sortable: true\n      }, {\n        text: 'Заголовок',\n        value: 'title',\n        sortable: true\n      }, {\n        text: 'Статус',\n        value: 'published_date',\n        sortable: true\n      }, {\n        text: 'Дата создания',\n        value: 'created_date',\n        sortable: true\n      }, {\n        text: 'Действия',\n        value: 'actions',\n        sortable: false\n      }]\n    };\n  },\n  methods: {\n    loadPosts: function loadPosts() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.loading = true;\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get('/api/posts/');\n            case 4:\n              response = _context.sent;\n              _this.posts = response.data;\n              _context.next = 12;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('Ошибка загрузки постов:', _context.t0);\n              _this.$toast.error('Ошибка загрузки постов');\n            case 12:\n              _context.prev = 12;\n              _this.loading = false;\n              return _context.finish(12);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 8, 12, 15]]);\n      }))();\n    },\n    createPost: function createPost() {\n      this.isEdit = false;\n      this.postForm = {\n        title: '',\n        content: '',\n        image_url: '',\n        published: false\n      };\n      this.dialog = true;\n    },\n    editPost: function editPost(post) {\n      this.isEdit = true;\n      this.postForm = {\n        id: post.id,\n        title: post.title,\n        content: post.content,\n        image_url: post.image_url || '',\n        published: !!post.published_date\n      };\n      this.dialog = true;\n    },\n    savePost: function savePost() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this2$postForm$image, postData, errors;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (_this2.$refs.form.validate()) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 2:\n              _context2.prev = 2;\n              postData = {\n                title: _this2.postForm.title.trim(),\n                content: _this2.postForm.content.trim(),\n                image_url: ((_this2$postForm$image = _this2.postForm.image_url) === null || _this2$postForm$image === void 0 ? void 0 : _this2$postForm$image.trim()) || null,\n                published_date: _this2.postForm.published ? new Date().toISOString() : null\n              }; // Валидация URL изображения\n              if (!(postData.image_url && !_this2.isValidUrl(postData.image_url))) {\n                _context2.next = 7;\n                break;\n              }\n              _this2.$toast.error('Введите корректный URL изображения');\n              return _context2.abrupt(\"return\");\n            case 7:\n              if (!_this2.isEdit) {\n                _context2.next = 13;\n                break;\n              }\n              _context2.next = 10;\n              return axios.put(\"/api/posts/\".concat(_this2.postForm.id, \"/\"), postData);\n            case 10:\n              _this2.$toast.success('Пост успешно обновлен');\n              _context2.next = 16;\n              break;\n            case 13:\n              _context2.next = 15;\n              return axios.post('/api/posts/', postData);\n            case 15:\n              _this2.$toast.success('Пост успешно создан');\n            case 16:\n              _this2.dialog = false;\n              _this2.loadPosts();\n              _context2.next = 24;\n              break;\n            case 20:\n              _context2.prev = 20;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.error('Ошибка сохранения поста:', _context2.t0);\n              if (_context2.t0.response && _context2.t0.response.data) {\n                errors = _context2.t0.response.data;\n                if (_typeof(errors) === 'object') {\n                  Object.keys(errors).forEach(function (key) {\n                    _this2.$toast.error(\"\".concat(key, \": \").concat(errors[key]));\n                  });\n                } else {\n                  _this2.$toast.error('Ошибка сохранения поста');\n                }\n              } else {\n                _this2.$toast.error('Ошибка сохранения поста');\n              }\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[2, 20]]);\n      }))();\n    },\n    isValidUrl: function isValidUrl(string) {\n      try {\n        new URL(string);\n        return true;\n      } catch (_) {\n        return false;\n      }\n    },\n    togglePublish: function togglePublish(post) {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var postData;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              postData = {\n                title: post.title,\n                content: post.content,\n                image_url: post.image_url,\n                published_date: post.published_date ? null : new Date().toISOString()\n              };\n              _context3.next = 4;\n              return axios.put(\"/api/posts/\".concat(post.id, \"/\"), postData);\n            case 4:\n              post.published_date = postData.published_date;\n              _this3.$toast.success(post.published_date ? 'Пост опубликован' : 'Пост снят с публикации');\n              _context3.next = 12;\n              break;\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Ошибка изменения статуса публикации:', _context3.t0);\n              _this3.$toast.error('Ошибка изменения статуса публикации');\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 8]]);\n      }))();\n    },\n    deletePost: function deletePost(post) {\n      this.postToDelete = post;\n      this.deleteDialog = true;\n    },\n    confirmDelete: function confirmDelete() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return axios[\"delete\"](\"/api/posts/\".concat(_this4.postToDelete.id, \"/\"));\n            case 3:\n              _this4.deleteDialog = false;\n              _this4.loadPosts();\n              _this4.$toast.success('Пост удален');\n              _context4.next = 12;\n              break;\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error('Ошибка удаления поста:', _context4.t0);\n              _this4.$toast.error('Ошибка удаления поста');\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 8]]);\n      }))();\n    },\n    formatDate: function formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString('ru-RU');\n    }\n  },\n  mounted: function mounted() {\n    this.loadPosts();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}