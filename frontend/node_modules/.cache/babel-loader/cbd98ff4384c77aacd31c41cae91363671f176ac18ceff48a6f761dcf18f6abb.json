{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nexport default {\n  name: 'AdminUsers',\n  data: function data() {\n    return {\n      loading: false,\n      users: [],\n      search: '',\n      statusFilter: null,\n      statusOptions: [{\n        text: 'Все пользователи',\n        value: null\n      }, {\n        text: 'Администраторы',\n        value: true\n      }, {\n        text: 'Обычные пользователи',\n        value: false\n      }],\n      headers: [{\n        text: 'ID',\n        value: 'id',\n        sortable: true\n      }, {\n        text: 'Имя пользователя',\n        value: 'username',\n        sortable: true\n      }, {\n        text: 'Email',\n        value: 'email',\n        sortable: true\n      }, {\n        text: 'Статус',\n        value: 'is_staff',\n        sortable: true\n      }, {\n        text: 'Дата регистрации',\n        value: 'date_joined',\n        sortable: true\n      }, {\n        text: 'Действия',\n        value: 'actions',\n        sortable: false\n      }]\n    };\n  },\n  computed: {\n    filteredUsers: function filteredUsers() {\n      var _this = this;\n      var filtered = this.users;\n      if (this.statusFilter !== null) {\n        filtered = filtered.filter(function (user) {\n          return user.is_staff === _this.statusFilter;\n        });\n      }\n      return filtered;\n    }\n  },\n  methods: {\n    loadUsers: function loadUsers() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this2.loading = true;\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get('/api/users/');\n            case 4:\n              response = _context.sent;\n              _this2.users = response.data;\n              _context.next = 12;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('Ошибка загрузки пользователей:', _context.t0);\n              _this2.$toast.error('Ошибка загрузки пользователей');\n            case 12:\n              _context.prev = 12;\n              _this2.loading = false;\n              return _context.finish(12);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 8, 12, 15]]);\n      }))();\n    },\n    toggleStaffStatus: function toggleStaffStatus(user) {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var action, confirmMessage;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              action = user.is_staff ? 'убрать права администратора' : 'назначить администратором';\n              confirmMessage = \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B, \\u0447\\u0442\\u043E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \".concat(action, \" \\u0443 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F \\\"\").concat(user.username, \"\\\"?\");\n              if (!confirm(confirmMessage)) {\n                _context2.next = 14;\n                break;\n              }\n              _context2.prev = 3;\n              _context2.next = 6;\n              return axios.patch(\"/api/users/\".concat(user.id, \"/\"), {\n                is_staff: !user.is_staff\n              });\n            case 6:\n              user.is_staff = !user.is_staff;\n              _this3.$toast.success(\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F \".concat(user.username, \" \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\"));\n              _context2.next = 14;\n              break;\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](3);\n              console.error('Ошибка обновления статуса:', _context2.t0);\n              _this3.$toast.error('Ошибка обновления статуса пользователя');\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[3, 10]]);\n      }))();\n    },\n    formatDate: function formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString('ru-RU');\n    }\n  },\n  mounted: function mounted() {\n    this.loadUsers();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}