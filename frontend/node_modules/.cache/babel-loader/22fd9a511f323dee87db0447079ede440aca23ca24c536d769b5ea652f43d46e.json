{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\n// Styles\nimport \"../../../src/components/VTextField/VTextField.sass\";\nimport \"../../../src/components/VOtpInput/VOtpInput.sass\"; // Extensions\n\nimport VInput from '../VInput';\nimport VTextField from '../VTextField/VTextField'; // Directives\n\nimport ripple from '../../directives/ripple'; // Utilities\n\nimport { convertToUnit, keyCodes } from '../../util/helpers';\nimport { breaking } from '../../util/console'; // Types\n\nimport mixins from '../../util/mixins';\nvar baseMixins = mixins(VInput);\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-otp-input',\n  directives: {\n    ripple: ripple\n  },\n  inheritAttrs: false,\n  props: {\n    length: {\n      type: [Number, String],\n      \"default\": 6\n    },\n    type: {\n      type: String,\n      \"default\": 'text'\n    },\n    plain: Boolean\n  },\n  data: function data() {\n    return {\n      initialValue: null,\n      isBooted: false,\n      otp: []\n    };\n  },\n  computed: {\n    outlined: function outlined() {\n      return !this.plain;\n    },\n    classes: function classes() {\n      return _objectSpread(_objectSpread(_objectSpread({}, VInput.options.computed.classes.call(this)), VTextField.options.computed.classes.call(this)), {}, {\n        'v-otp-input--plain': this.plain\n      });\n    }\n  },\n  watch: {\n    isFocused: 'updateValue',\n    value: function value(val) {\n      this.lazyValue = val;\n      this.otp = (val === null || val === void 0 ? void 0 : val.split('')) || [];\n    }\n  },\n  created: function created() {\n    var _a;\n    /* istanbul ignore next */\n\n    if (this.$attrs.hasOwnProperty('browser-autocomplete')) {\n      breaking('browser-autocomplete', 'autocomplete', this);\n    }\n    this.otp = ((_a = this.internalValue) === null || _a === void 0 ? void 0 : _a.split('')) || [];\n  },\n  mounted: function mounted() {\n    var _this = this;\n    requestAnimationFrame(function () {\n      return _this.isBooted = true;\n    });\n  },\n  methods: {\n    /** @public */focus: function focus(e, otpIdx) {\n      this.onFocus(e, otpIdx || 0);\n    },\n    genInputSlot: function genInputSlot(otpIdx) {\n      var _this2 = this;\n      return this.$createElement('div', this.setBackgroundColor(this.backgroundColor, {\n        staticClass: 'v-input__slot',\n        style: {\n          height: convertToUnit(this.height)\n        },\n        on: {\n          click: function click() {\n            return _this2.onClick(otpIdx);\n          },\n          mousedown: function mousedown(e) {\n            return _this2.onMouseDown(e, otpIdx);\n          },\n          mouseup: function mouseup(e) {\n            return _this2.onMouseUp(e, otpIdx);\n          }\n        }\n      }), [this.genDefaultSlot(otpIdx)]);\n    },\n    genControl: function genControl(otpIdx) {\n      return this.$createElement('div', {\n        staticClass: 'v-input__control'\n      }, [this.genInputSlot(otpIdx)]);\n    },\n    genDefaultSlot: function genDefaultSlot(otpIdx) {\n      return [this.genFieldset(), this.genTextFieldSlot(otpIdx)];\n    },\n    genContent: function genContent() {\n      var _this3 = this;\n      return Array.from({\n        length: +this.length\n      }, function (_, i) {\n        return _this3.$createElement('div', _this3.setTextColor(_this3.validationState, {\n          staticClass: 'v-input',\n          \"class\": _this3.classes\n        }), [_this3.genControl(i)]);\n      });\n    },\n    genFieldset: function genFieldset() {\n      return this.$createElement('fieldset', {\n        attrs: {\n          'aria-hidden': true\n        }\n      }, [this.genLegend()]);\n    },\n    genLegend: function genLegend() {\n      var span = this.$createElement('span', {\n        domProps: {\n          innerHTML: '&#8203;'\n        }\n      });\n      return this.$createElement('legend', {\n        style: {\n          width: '0px'\n        }\n      }, [span]);\n    },\n    genInput: function genInput(otpIdx) {\n      var _this4 = this;\n      var listeners = Object.assign({}, this.listeners$);\n      delete listeners.change; // Change should not be bound externally\n\n      return this.$createElement('input', {\n        style: {},\n        domProps: {\n          value: this.otp[otpIdx],\n          min: this.type === 'number' ? 0 : null\n        },\n        attrs: _objectSpread(_objectSpread({}, this.attrs$), {}, {\n          autocomplete: 'one-time-code',\n          disabled: this.isDisabled,\n          readonly: this.isReadonly,\n          type: this.type,\n          id: \"\".concat(this.computedId, \"--\").concat(otpIdx),\n          \"class\": \"otp-field-box--\".concat(otpIdx)\n        }),\n        on: Object.assign(listeners, {\n          blur: this.onBlur,\n          input: function input(e) {\n            return _this4.onInput(e, otpIdx);\n          },\n          focus: function focus(e) {\n            return _this4.onFocus(e, otpIdx);\n          },\n          keydown: this.onKeyDown,\n          keyup: function keyup(e) {\n            return _this4.onKeyUp(e, otpIdx);\n          }\n        }),\n        ref: 'input',\n        refInFor: true\n      });\n    },\n    genTextFieldSlot: function genTextFieldSlot(otpIdx) {\n      return this.$createElement('div', {\n        staticClass: 'v-text-field__slot'\n      }, [this.genInput(otpIdx)]);\n    },\n    onBlur: function onBlur(e) {\n      var _this5 = this;\n      this.isFocused = false;\n      e && this.$nextTick(function () {\n        return _this5.$emit('blur', e);\n      });\n    },\n    onClick: function onClick(otpIdx) {\n      if (this.isFocused || this.isDisabled || !this.$refs.input[otpIdx]) return;\n      this.onFocus(undefined, otpIdx);\n    },\n    onFocus: function onFocus(e, otpIdx) {\n      e === null || e === void 0 ? void 0 : e.preventDefault();\n      e === null || e === void 0 ? void 0 : e.stopPropagation();\n      var elements = this.$refs.input;\n      var ref = this.$refs.input && elements[otpIdx || 0];\n      if (!ref) return;\n      if (document.activeElement !== ref) {\n        ref.focus();\n        return ref.select();\n      }\n      if (!this.isFocused) {\n        this.isFocused = true;\n        ref.select();\n        e && this.$emit('focus', e);\n      }\n    },\n    onInput: function onInput(e, index) {\n      var maxCursor = +this.length - 1;\n      var target = e.target;\n      var value = target.value;\n      var inputDataArray = (value === null || value === void 0 ? void 0 : value.split('')) || [];\n      var newOtp = _toConsumableArray(this.otp);\n      for (var i = 0; i < inputDataArray.length; i++) {\n        var appIdx = index + i;\n        if (appIdx > maxCursor) break;\n        newOtp[appIdx] = inputDataArray[i].toString();\n      }\n      if (!inputDataArray.length) {\n        newOtp.splice(index, 1);\n      }\n      this.otp = newOtp;\n      this.internalValue = this.otp.join('');\n      if (index + inputDataArray.length >= +this.length) {\n        this.onCompleted();\n        this.clearFocus(index);\n      } else if (inputDataArray.length) {\n        this.changeFocus(index + inputDataArray.length);\n      }\n    },\n    clearFocus: function clearFocus(index) {\n      var input = this.$refs.input[index];\n      input.blur();\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.keyCode === keyCodes.enter) {\n        this.$emit('change', this.internalValue);\n      }\n      this.$emit('keydown', e);\n    },\n    onMouseDown: function onMouseDown(e, otpIdx) {\n      // Prevent input from being blurred\n      if (e.target !== this.$refs.input[otpIdx]) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      VInput.options.methods.onMouseDown.call(this, e);\n    },\n    onMouseUp: function onMouseUp(e, otpIdx) {\n      if (this.hasMouseDown) this.focus(e, otpIdx);\n      VInput.options.methods.onMouseUp.call(this, e);\n    },\n    changeFocus: function changeFocus(index) {\n      this.onFocus(undefined, index || 0);\n    },\n    updateValue: function updateValue(val) {\n      // Sets validationState from validatable\n      this.hasColor = val;\n      if (val) {\n        this.initialValue = this.lazyValue;\n      } else if (this.initialValue !== this.lazyValue) {\n        this.$emit('change', this.lazyValue);\n      }\n    },\n    onKeyUp: function onKeyUp(event, index) {\n      event.preventDefault();\n      var eventKey = event.key;\n      if (['Tab', 'Shift', 'Meta', 'Control', 'Alt'].includes(eventKey)) {\n        return;\n      }\n      if (['Delete'].includes(eventKey)) {\n        return;\n      }\n      if (eventKey === 'ArrowLeft' || eventKey === 'Backspace' && !this.otp[index]) {\n        return index > 0 && this.changeFocus(index - 1);\n      }\n      if (eventKey === 'ArrowRight') {\n        return index + 1 < +this.length && this.changeFocus(index + 1);\n      }\n    },\n    onCompleted: function onCompleted() {\n      var rsp = this.otp.join('');\n      if (rsp.length === +this.length) {\n        this.$emit('finish', rsp);\n      }\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      staticClass: 'v-otp-input',\n      \"class\": this.themeClasses\n    }, this.genContent());\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}