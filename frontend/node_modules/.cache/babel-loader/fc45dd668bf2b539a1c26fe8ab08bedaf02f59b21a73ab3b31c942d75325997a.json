{"ast":null,"code":"import _slicedToArray from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.trim.js\";\n// Components\nimport VTimePickerTitle from './VTimePickerTitle';\nimport VTimePickerClock from './VTimePickerClock'; // Mixins\n\nimport Picker from '../../mixins/picker';\nimport PickerButton from '../../mixins/picker-button'; // Utils\n\nimport { createRange } from '../../util/helpers';\nimport pad from '../VDatePicker/util/pad';\nimport mixins from '../../util/mixins';\nimport { SelectingTimes } from './SelectingTimes';\nvar rangeHours24 = createRange(24);\nvar rangeHours12am = createRange(12);\nvar rangeHours12pm = rangeHours12am.map(function (v) {\n  return v + 12;\n});\nvar range60 = createRange(60);\nvar selectingNames = {\n  1: 'hour',\n  2: 'minute',\n  3: 'second'\n};\nexport { SelectingTimes };\nexport default mixins(Picker, PickerButton\n/* @vue/component */).extend({\n  name: 'v-time-picker',\n  props: {\n    allowedHours: [Function, Array],\n    allowedMinutes: [Function, Array],\n    allowedSeconds: [Function, Array],\n    disabled: Boolean,\n    format: {\n      type: String,\n      \"default\": 'ampm',\n      validator: function validator(val) {\n        return ['ampm', '24hr'].includes(val);\n      }\n    },\n    min: String,\n    max: String,\n    readonly: Boolean,\n    scrollable: Boolean,\n    useSeconds: Boolean,\n    value: null,\n    ampmInTitle: Boolean\n  },\n  data: function data() {\n    return {\n      inputHour: null,\n      inputMinute: null,\n      inputSecond: null,\n      lazyInputHour: null,\n      lazyInputMinute: null,\n      lazyInputSecond: null,\n      period: 'am',\n      selecting: SelectingTimes.Hour\n    };\n  },\n  computed: {\n    selectingHour: {\n      get: function get() {\n        return this.selecting === SelectingTimes.Hour;\n      },\n      set: function set(v) {\n        this.selecting = SelectingTimes.Hour;\n      }\n    },\n    selectingMinute: {\n      get: function get() {\n        return this.selecting === SelectingTimes.Minute;\n      },\n      set: function set(v) {\n        this.selecting = SelectingTimes.Minute;\n      }\n    },\n    selectingSecond: {\n      get: function get() {\n        return this.selecting === SelectingTimes.Second;\n      },\n      set: function set(v) {\n        this.selecting = SelectingTimes.Second;\n      }\n    },\n    isAllowedHourCb: function isAllowedHourCb() {\n      var _this = this;\n      var cb;\n      if (this.allowedHours instanceof Array) {\n        cb = function cb(val) {\n          return _this.allowedHours.includes(val);\n        };\n      } else {\n        cb = this.allowedHours;\n      }\n      if (!this.min && !this.max) return cb;\n      var minHour = this.min ? Number(this.min.split(':')[0]) : 0;\n      var maxHour = this.max ? Number(this.max.split(':')[0]) : 23;\n      return function (val) {\n        return val >= minHour * 1 && val <= maxHour * 1 && (!cb || cb(val));\n      };\n    },\n    isAllowedMinuteCb: function isAllowedMinuteCb() {\n      var _this2 = this;\n      var cb;\n      var isHourAllowed = !this.isAllowedHourCb || this.inputHour === null || this.isAllowedHourCb(this.inputHour);\n      if (this.allowedMinutes instanceof Array) {\n        cb = function cb(val) {\n          return _this2.allowedMinutes.includes(val);\n        };\n      } else {\n        cb = this.allowedMinutes;\n      }\n      if (!this.min && !this.max) {\n        return isHourAllowed ? cb : function () {\n          return false;\n        };\n      }\n      var _ref = this.min ? this.min.split(':').map(Number) : [0, 0],\n        _ref2 = _slicedToArray(_ref, 2),\n        minHour = _ref2[0],\n        minMinute = _ref2[1];\n      var _ref3 = this.max ? this.max.split(':').map(Number) : [23, 59],\n        _ref4 = _slicedToArray(_ref3, 2),\n        maxHour = _ref4[0],\n        maxMinute = _ref4[1];\n      var minTime = minHour * 60 + minMinute * 1;\n      var maxTime = maxHour * 60 + maxMinute * 1;\n      return function (val) {\n        var time = 60 * _this2.inputHour + val;\n        return time >= minTime && time <= maxTime && isHourAllowed && (!cb || cb(val));\n      };\n    },\n    isAllowedSecondCb: function isAllowedSecondCb() {\n      var _this3 = this;\n      var cb;\n      var isHourAllowed = !this.isAllowedHourCb || this.inputHour === null || this.isAllowedHourCb(this.inputHour);\n      var isMinuteAllowed = isHourAllowed && (!this.isAllowedMinuteCb || this.inputMinute === null || this.isAllowedMinuteCb(this.inputMinute));\n      if (this.allowedSeconds instanceof Array) {\n        cb = function cb(val) {\n          return _this3.allowedSeconds.includes(val);\n        };\n      } else {\n        cb = this.allowedSeconds;\n      }\n      if (!this.min && !this.max) {\n        return isMinuteAllowed ? cb : function () {\n          return false;\n        };\n      }\n      var _ref5 = this.min ? this.min.split(':').map(Number) : [0, 0, 0],\n        _ref6 = _slicedToArray(_ref5, 3),\n        minHour = _ref6[0],\n        minMinute = _ref6[1],\n        minSecond = _ref6[2];\n      var _ref7 = this.max ? this.max.split(':').map(Number) : [23, 59, 59],\n        _ref8 = _slicedToArray(_ref7, 3),\n        maxHour = _ref8[0],\n        maxMinute = _ref8[1],\n        maxSecond = _ref8[2];\n      var minTime = minHour * 3600 + minMinute * 60 + (minSecond || 0) * 1;\n      var maxTime = maxHour * 3600 + maxMinute * 60 + (maxSecond || 0) * 1;\n      return function (val) {\n        var time = 3600 * _this3.inputHour + 60 * _this3.inputMinute + val;\n        return time >= minTime && time <= maxTime && isMinuteAllowed && (!cb || cb(val));\n      };\n    },\n    isAmPm: function isAmPm() {\n      return this.format === 'ampm';\n    }\n  },\n  watch: {\n    value: 'setInputData'\n  },\n  mounted: function mounted() {\n    this.setInputData(this.value);\n    this.$on('update:period', this.setPeriod);\n  },\n  methods: {\n    genValue: function genValue() {\n      if (this.inputHour != null && this.inputMinute != null && (!this.useSeconds || this.inputSecond != null)) {\n        return \"\".concat(pad(this.inputHour), \":\").concat(pad(this.inputMinute)) + (this.useSeconds ? \":\".concat(pad(this.inputSecond)) : '');\n      }\n      return null;\n    },\n    emitValue: function emitValue() {\n      var value = this.genValue();\n      if (value !== null) this.$emit('input', value);\n    },\n    setPeriod: function setPeriod(period) {\n      this.period = period;\n      if (this.inputHour != null) {\n        var newHour = this.inputHour + (period === 'am' ? -12 : 12);\n        this.inputHour = this.firstAllowed('hour', newHour);\n        this.emitValue();\n      }\n    },\n    setInputData: function setInputData(value) {\n      if (value == null || value === '') {\n        this.inputHour = null;\n        this.inputMinute = null;\n        this.inputSecond = null;\n      } else if (value instanceof Date) {\n        this.inputHour = value.getHours();\n        this.inputMinute = value.getMinutes();\n        this.inputSecond = value.getSeconds();\n      } else {\n        var _ref9 = value.trim().toLowerCase().match(/^(\\d+):(\\d+)(:(\\d+))?([ap]m)?$/) || new Array(6),\n          _ref10 = _slicedToArray(_ref9, 6),\n          hour = _ref10[1],\n          minute = _ref10[2],\n          second = _ref10[4],\n          period = _ref10[5];\n        this.inputHour = period ? this.convert12to24(parseInt(hour, 10), period) : parseInt(hour, 10);\n        this.inputMinute = parseInt(minute, 10);\n        this.inputSecond = parseInt(second || 0, 10);\n      }\n      this.period = this.inputHour == null || this.inputHour < 12 ? 'am' : 'pm';\n    },\n    convert24to12: function convert24to12(hour) {\n      return hour ? (hour - 1) % 12 + 1 : 12;\n    },\n    convert12to24: function convert12to24(hour, period) {\n      return hour % 12 + (period === 'pm' ? 12 : 0);\n    },\n    onInput: function onInput(value) {\n      if (this.selecting === SelectingTimes.Hour) {\n        this.inputHour = this.isAmPm ? this.convert12to24(value, this.period) : value;\n      } else if (this.selecting === SelectingTimes.Minute) {\n        this.inputMinute = value;\n      } else {\n        this.inputSecond = value;\n      }\n      this.emitValue();\n    },\n    onChange: function onChange(value) {\n      this.$emit(\"click:\".concat(selectingNames[this.selecting]), value);\n      var emitChange = this.selecting === (this.useSeconds ? SelectingTimes.Second : SelectingTimes.Minute);\n      if (this.selecting === SelectingTimes.Hour) {\n        this.selecting = SelectingTimes.Minute;\n      } else if (this.useSeconds && this.selecting === SelectingTimes.Minute) {\n        this.selecting = SelectingTimes.Second;\n      }\n      if (this.inputHour === this.lazyInputHour && this.inputMinute === this.lazyInputMinute && (!this.useSeconds || this.inputSecond === this.lazyInputSecond)) return;\n      var time = this.genValue();\n      if (time === null) return;\n      this.lazyInputHour = this.inputHour;\n      this.lazyInputMinute = this.inputMinute;\n      this.useSeconds && (this.lazyInputSecond = this.inputSecond);\n      emitChange && this.$emit('change', time);\n    },\n    firstAllowed: function firstAllowed(type, value) {\n      var allowedFn = type === 'hour' ? this.isAllowedHourCb : type === 'minute' ? this.isAllowedMinuteCb : this.isAllowedSecondCb;\n      if (!allowedFn) return value; // TODO: clean up\n\n      var range = type === 'minute' ? range60 : type === 'second' ? range60 : this.isAmPm ? value < 12 ? rangeHours12am : rangeHours12pm : rangeHours24;\n      var first = range.find(function (v) {\n        return allowedFn((v + value) % range.length + range[0]);\n      });\n      return ((first || 0) + value) % range.length + range[0];\n    },\n    genClock: function genClock() {\n      return this.$createElement(VTimePickerClock, {\n        props: {\n          allowedValues: this.selecting === SelectingTimes.Hour ? this.isAllowedHourCb : this.selecting === SelectingTimes.Minute ? this.isAllowedMinuteCb : this.isAllowedSecondCb,\n          color: this.color,\n          dark: this.dark,\n          disabled: this.disabled,\n          \"double\": this.selecting === SelectingTimes.Hour && !this.isAmPm,\n          format: this.selecting === SelectingTimes.Hour ? this.isAmPm ? this.convert24to12 : function (val) {\n            return val;\n          } : function (val) {\n            return pad(val, 2);\n          },\n          light: this.light,\n          max: this.selecting === SelectingTimes.Hour ? this.isAmPm && this.period === 'am' ? 11 : 23 : 59,\n          min: this.selecting === SelectingTimes.Hour && this.isAmPm && this.period === 'pm' ? 12 : 0,\n          readonly: this.readonly,\n          scrollable: this.scrollable,\n          size: Number(this.width) - (!this.fullWidth && this.landscape ? 80 : 20),\n          step: this.selecting === SelectingTimes.Hour ? 1 : 5,\n          value: this.selecting === SelectingTimes.Hour ? this.inputHour : this.selecting === SelectingTimes.Minute ? this.inputMinute : this.inputSecond\n        },\n        on: {\n          input: this.onInput,\n          change: this.onChange\n        },\n        ref: 'clock'\n      });\n    },\n    genClockAmPm: function genClockAmPm() {\n      return this.$createElement('div', this.setTextColor(this.color || 'primary', {\n        staticClass: 'v-time-picker-clock__ampm'\n      }), [this.genPickerButton('period', 'am', this.$vuetify.lang.t('$vuetify.timePicker.am'), this.disabled || this.readonly), this.genPickerButton('period', 'pm', this.$vuetify.lang.t('$vuetify.timePicker.pm'), this.disabled || this.readonly)]);\n    },\n    genPickerBody: function genPickerBody() {\n      return this.$createElement('div', {\n        staticClass: 'v-time-picker-clock__container',\n        key: this.selecting\n      }, [!this.ampmInTitle && this.isAmPm && this.genClockAmPm(), this.genClock()]);\n    },\n    genPickerTitle: function genPickerTitle() {\n      var _this4 = this;\n      return this.$createElement(VTimePickerTitle, {\n        props: {\n          ampm: this.isAmPm,\n          ampmReadonly: this.isAmPm && !this.ampmInTitle,\n          disabled: this.disabled,\n          hour: this.inputHour,\n          minute: this.inputMinute,\n          second: this.inputSecond,\n          period: this.period,\n          readonly: this.readonly,\n          useSeconds: this.useSeconds,\n          selecting: this.selecting\n        },\n        on: {\n          'update:selecting': function updateSelecting(value) {\n            return _this4.selecting = value;\n          },\n          'update:period': function updatePeriod(period) {\n            return _this4.$emit('update:period', period);\n          }\n        },\n        ref: 'title',\n        slot: 'title'\n      });\n    }\n  },\n  render: function render() {\n    return this.genPicker('v-picker--time');\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}