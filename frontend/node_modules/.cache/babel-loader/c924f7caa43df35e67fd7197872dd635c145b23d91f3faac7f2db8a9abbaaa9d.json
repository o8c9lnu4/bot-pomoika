{"ast":null,"code":"import \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport { validateTimestamp, parseDate, DAYS_IN_WEEK, validateTime } from './timestamp';\nimport { CalendarEventOverlapModes } from '../modes';\nexport default {\n  base: {\n    start: {\n      type: [String, Number, Date],\n      validate: validateTimestamp,\n      \"default\": function _default() {\n        return parseDate(new Date()).date;\n      }\n    },\n    end: {\n      type: [String, Number, Date],\n      validate: validateTimestamp\n    },\n    weekdays: {\n      type: [Array, String],\n      \"default\": function _default() {\n        return [0, 1, 2, 3, 4, 5, 6];\n      },\n      validate: validateWeekdays\n    },\n    hideHeader: {\n      type: Boolean\n    },\n    shortWeekdays: {\n      type: Boolean,\n      \"default\": true\n    },\n    weekdayFormat: {\n      type: Function,\n      \"default\": null\n    },\n    dayFormat: {\n      type: Function,\n      \"default\": null\n    }\n  },\n  intervals: {\n    maxDays: {\n      type: Number,\n      \"default\": 7\n    },\n    shortIntervals: {\n      type: Boolean,\n      \"default\": true\n    },\n    intervalHeight: {\n      type: [Number, String],\n      \"default\": 48,\n      validate: validateNumber\n    },\n    intervalWidth: {\n      type: [Number, String],\n      \"default\": 60,\n      validate: validateNumber\n    },\n    intervalMinutes: {\n      type: [Number, String],\n      \"default\": 60,\n      validate: validateNumber\n    },\n    firstInterval: {\n      type: [Number, String],\n      \"default\": 0,\n      validate: validateNumber\n    },\n    firstTime: {\n      type: [Number, String, Object],\n      validate: validateTime\n    },\n    intervalCount: {\n      type: [Number, String],\n      \"default\": 24,\n      validate: validateNumber\n    },\n    intervalFormat: {\n      type: Function,\n      \"default\": null\n    },\n    intervalStyle: {\n      type: Function,\n      \"default\": null\n    },\n    showIntervalLabel: {\n      type: Function,\n      \"default\": null\n    }\n  },\n  weeks: {\n    localeFirstDayOfYear: {\n      type: [String, Number],\n      \"default\": 0\n    },\n    minWeeks: {\n      validate: validateNumber,\n      \"default\": 1\n    },\n    shortMonths: {\n      type: Boolean,\n      \"default\": true\n    },\n    showMonthOnFirst: {\n      type: Boolean,\n      \"default\": true\n    },\n    showWeek: Boolean,\n    monthFormat: {\n      type: Function,\n      \"default\": null\n    }\n  },\n  calendar: {\n    type: {\n      type: String,\n      \"default\": 'month'\n    },\n    value: {\n      type: [String, Number, Date],\n      validate: validateTimestamp\n    }\n  },\n  category: {\n    categories: {\n      type: [Array, String],\n      \"default\": ''\n    },\n    categoryText: {\n      type: [String, Function]\n    },\n    categoryHideDynamic: {\n      type: Boolean\n    },\n    categoryShowAll: {\n      type: Boolean\n    },\n    categoryForInvalid: {\n      type: String,\n      \"default\": ''\n    },\n    categoryDays: {\n      type: [Number, String],\n      \"default\": 1,\n      validate: function validate(x) {\n        return isFinite(parseInt(x)) && parseInt(x) > 0;\n      }\n    }\n  },\n  events: {\n    events: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    eventStart: {\n      type: String,\n      \"default\": 'start'\n    },\n    eventEnd: {\n      type: String,\n      \"default\": 'end'\n    },\n    eventTimed: {\n      type: [String, Function],\n      \"default\": 'timed'\n    },\n    eventCategory: {\n      type: [String, Function],\n      \"default\": 'category'\n    },\n    eventHeight: {\n      type: Number,\n      \"default\": 20\n    },\n    eventColor: {\n      type: [String, Function],\n      \"default\": 'primary'\n    },\n    eventTextColor: {\n      type: [String, Function],\n      \"default\": 'white'\n    },\n    eventName: {\n      type: [String, Function],\n      \"default\": 'name'\n    },\n    eventOverlapThreshold: {\n      type: [String, Number],\n      \"default\": 60\n    },\n    eventOverlapMode: {\n      type: [String, Function],\n      \"default\": 'stack',\n      validate: function validate(mode) {\n        return mode in CalendarEventOverlapModes || typeof mode === 'function';\n      }\n    },\n    eventMore: {\n      type: Boolean,\n      \"default\": true\n    },\n    eventMoreText: {\n      type: String,\n      \"default\": '$vuetify.calendar.moreEvents'\n    },\n    eventRipple: {\n      type: [Boolean, Object],\n      \"default\": null\n    },\n    eventMarginBottom: {\n      type: Number,\n      \"default\": 1\n    }\n  }\n};\nexport function validateNumber(input) {\n  return isFinite(parseInt(input));\n}\nexport function validateWeekdays(input) {\n  if (typeof input === 'string') {\n    input = input.split(',');\n  }\n  if (Array.isArray(input)) {\n    var ints = input.map(function (x) {\n      return parseInt(x);\n    });\n    if (ints.length > DAYS_IN_WEEK || ints.length === 0) {\n      return false;\n    }\n    var visited = {};\n    var wrapped = false;\n    for (var i = 0; i < ints.length; i++) {\n      var x = ints[i];\n      if (!isFinite(x) || x < 0 || x >= DAYS_IN_WEEK) {\n        return false;\n      }\n      if (i > 0) {\n        var d = x - ints[i - 1];\n        if (d < 0) {\n          if (wrapped) {\n            return false;\n          }\n          wrapped = true;\n        } else if (d === 0) {\n          return false;\n        }\n      }\n      if (visited[x]) {\n        return false;\n      }\n      visited[x] = true;\n    }\n    return true;\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}