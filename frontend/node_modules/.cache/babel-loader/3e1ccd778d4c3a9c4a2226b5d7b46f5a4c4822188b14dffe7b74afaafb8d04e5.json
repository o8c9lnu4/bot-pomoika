{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"aria-atomic\", \"aria-label\", \"aria-live\", \"role\", \"title\"];\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n// Styles\nimport \"../../../src/components/VBadge/VBadge.sass\"; // Components\n\nimport VIcon from '../VIcon/VIcon'; // Mixins\n\nimport Colorable from '../../mixins/colorable';\nimport Themeable from '../../mixins/themeable';\nimport Toggleable from '../../mixins/toggleable';\nimport Transitionable from '../../mixins/transitionable';\nimport { factory as PositionableFactory } from '../../mixins/positionable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { convertToUnit, getSlot } from '../../util/helpers';\nexport default mixins(Colorable, PositionableFactory(['left', 'bottom']), Themeable, Toggleable, Transitionable).extend({\n  name: 'v-badge',\n  props: {\n    avatar: Boolean,\n    bordered: Boolean,\n    color: {\n      type: String,\n      \"default\": 'primary'\n    },\n    content: {\n      required: false\n    },\n    dot: Boolean,\n    label: {\n      type: String,\n      \"default\": '$vuetify.badge'\n    },\n    icon: String,\n    inline: Boolean,\n    offsetX: [Number, String],\n    offsetY: [Number, String],\n    overlap: Boolean,\n    tile: Boolean,\n    transition: {\n      type: String,\n      \"default\": 'scale-rotate-transition'\n    },\n    value: {\n      \"default\": true\n    }\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread({\n        'v-badge--avatar': this.avatar,\n        'v-badge--bordered': this.bordered,\n        'v-badge--bottom': this.bottom,\n        'v-badge--dot': this.dot,\n        'v-badge--icon': this.icon != null,\n        'v-badge--inline': this.inline,\n        'v-badge--left': this.left,\n        'v-badge--overlap': this.overlap,\n        'v-badge--tile': this.tile\n      }, this.themeClasses);\n    },\n    computedBottom: function computedBottom() {\n      return this.bottom ? 'auto' : this.computedYOffset;\n    },\n    computedLeft: function computedLeft() {\n      if (this.isRtl) {\n        return this.left ? this.computedXOffset : 'auto';\n      }\n      return this.left ? 'auto' : this.computedXOffset;\n    },\n    computedRight: function computedRight() {\n      if (this.isRtl) {\n        return this.left ? 'auto' : this.computedXOffset;\n      }\n      return !this.left ? 'auto' : this.computedXOffset;\n    },\n    computedTop: function computedTop() {\n      return this.bottom ? this.computedYOffset : 'auto';\n    },\n    computedXOffset: function computedXOffset() {\n      return this.calcPosition(this.offsetX);\n    },\n    computedYOffset: function computedYOffset() {\n      return this.calcPosition(this.offsetY);\n    },\n    isRtl: function isRtl() {\n      return this.$vuetify.rtl;\n    },\n    // Default fallback if offsetX\n    // or offsetY are undefined.\n    offset: function offset() {\n      if (this.overlap) return this.dot ? 8 : 12;\n      return this.dot ? 2 : 4;\n    },\n    styles: function styles() {\n      if (this.inline) return {};\n      return {\n        bottom: this.computedBottom,\n        left: this.computedLeft,\n        right: this.computedRight,\n        top: this.computedTop\n      };\n    }\n  },\n  methods: {\n    calcPosition: function calcPosition(offset) {\n      return \"calc(100% - \".concat(convertToUnit(offset || this.offset), \")\");\n    },\n    genBadge: function genBadge() {\n      var lang = this.$vuetify.lang;\n      var label = this.$attrs['aria-label'] || lang.t(this.label);\n      var data = this.setBackgroundColor(this.color, {\n        staticClass: 'v-badge__badge',\n        style: this.styles,\n        attrs: {\n          'aria-atomic': this.$attrs['aria-atomic'] || 'true',\n          'aria-label': label,\n          'aria-live': this.$attrs['aria-live'] || 'polite',\n          title: this.$attrs.title,\n          role: this.$attrs.role || 'status'\n        },\n        directives: [{\n          name: 'show',\n          value: this.isActive\n        }]\n      });\n      var badge = this.$createElement('span', data, [this.genBadgeContent()]);\n      if (!this.transition) return badge;\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition,\n          origin: this.origin,\n          mode: this.mode\n        }\n      }, [badge]);\n    },\n    genBadgeContent: function genBadgeContent() {\n      // Dot prop shows no content\n      if (this.dot) return undefined;\n      var slot = getSlot(this, 'badge');\n      if (slot) return slot;\n      if (this.content) return String(this.content);\n      if (this.icon) return this.$createElement(VIcon, this.icon);\n      return undefined;\n    },\n    genBadgeWrapper: function genBadgeWrapper() {\n      return this.$createElement('span', {\n        staticClass: 'v-badge__wrapper'\n      }, [this.genBadge()]);\n    }\n  },\n  render: function render(h) {\n    var badge = [this.genBadgeWrapper()];\n    var children = [getSlot(this)];\n    var _this$$attrs = this.$attrs,\n      _x = _this$$attrs['aria-atomic'],\n      _y = _this$$attrs['aria-label'],\n      _z = _this$$attrs['aria-live'],\n      role = _this$$attrs.role,\n      title = _this$$attrs.title,\n      attrs = _objectWithoutProperties(_this$$attrs, _excluded);\n    if (this.inline && this.left) children.unshift(badge);else children.push(badge);\n    return h('span', {\n      staticClass: 'v-badge',\n      attrs: attrs,\n      \"class\": this.classes\n    }, children);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}