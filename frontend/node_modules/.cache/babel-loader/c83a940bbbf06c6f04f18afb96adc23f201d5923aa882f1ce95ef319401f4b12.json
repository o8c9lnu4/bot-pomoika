{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// Extensions\nimport { BaseSlideGroup } from '../VSlideGroup/VSlideGroup'; // Mixins\n\nimport Themeable from '../../mixins/themeable';\nimport SSRBootable from '../../mixins/ssr-bootable'; // Utilities\n\nimport mixins from '../../util/mixins';\nexport default mixins(BaseSlideGroup, SSRBootable, Themeable\n/* @vue/component */).extend({\n  name: 'v-tabs-bar',\n  provide: function provide() {\n    return {\n      tabsBar: this\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread({}, BaseSlideGroup.options.computed.classes.call(this)), {}, {\n        'v-tabs-bar': true,\n        'v-tabs-bar--is-mobile': this.isMobile,\n        // TODO: Remove this and move to v-slide-group\n        'v-tabs-bar--show-arrows': this.showArrows\n      }, this.themeClasses);\n    }\n  },\n  watch: {\n    items: 'callSlider',\n    internalValue: 'callSlider',\n    $route: 'onRouteChange'\n  },\n  methods: {\n    callSlider: function callSlider() {\n      if (!this.isBooted) return;\n      this.$emit('call:slider');\n    },\n    genContent: function genContent() {\n      var render = BaseSlideGroup.options.methods.genContent.call(this);\n      render.data = render.data || {};\n      render.data.staticClass += ' v-tabs-bar__content';\n      return render;\n    },\n    onRouteChange: function onRouteChange(val, oldVal) {\n      /* istanbul ignore next */\n      if (this.mandatory) return;\n      var items = this.items;\n      var newPath = val.path;\n      var oldPath = oldVal.path;\n      var hasNew = false;\n      var hasOld = false;\n      var _iterator = _createForOfIteratorHelper(items),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          if (item.to === oldPath) hasOld = true;else if (item.to === newPath) hasNew = true;\n          if (hasNew && hasOld) break;\n        } // If we have an old item and not a new one\n        // it's assumed that the user navigated to\n        // a path that is not present in the items\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (!hasNew && hasOld) this.internalValue = undefined;\n    }\n  },\n  render: function render(h) {\n    var render = BaseSlideGroup.options.render.call(this, h);\n    render.data.attrs = {\n      role: 'tablist'\n    };\n    return render;\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}