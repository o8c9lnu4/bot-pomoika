{"ast":null,"code":"import \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\n// Mixins\nimport mixins from '../../../util/mixins';\nimport Colorable from '../../../mixins/colorable';\nimport Localable from '../../../mixins/localable';\nimport Mouse from './mouse';\nimport Themeable from '../../../mixins/themeable';\nimport Times from './times'; // Directives\n\nimport Resize from '../../../directives/resize'; // Util\n\nimport props from '../util/props';\nimport { parseTimestamp, getWeekdaySkips, createDayList, createNativeLocaleFormatter, getStartOfWeek as _getStartOfWeek, getEndOfWeek as _getEndOfWeek, getTimestampIdentifier } from '../util/timestamp';\nexport default mixins(Colorable, Localable, Mouse, Themeable, Times\n/* @vue/component */).extend({\n  name: 'calendar-base',\n  directives: {\n    Resize: Resize\n  },\n  props: props.base,\n  computed: {\n    parsedWeekdays: function parsedWeekdays() {\n      return Array.isArray(this.weekdays) ? this.weekdays : (this.weekdays || '').split(',').map(function (x) {\n        return parseInt(x, 10);\n      });\n    },\n    weekdaySkips: function weekdaySkips() {\n      return getWeekdaySkips(this.parsedWeekdays);\n    },\n    weekdaySkipsReverse: function weekdaySkipsReverse() {\n      var reversed = this.weekdaySkips.slice();\n      reversed.reverse();\n      return reversed;\n    },\n    parsedStart: function parsedStart() {\n      return parseTimestamp(this.start, true);\n    },\n    parsedEnd: function parsedEnd() {\n      var start = this.parsedStart;\n      var end = this.end ? parseTimestamp(this.end) || start : start;\n      return getTimestampIdentifier(end) < getTimestampIdentifier(start) ? start : end;\n    },\n    days: function days() {\n      return createDayList(this.parsedStart, this.parsedEnd, this.times.today, this.weekdaySkips);\n    },\n    dayFormatter: function dayFormatter() {\n      if (this.dayFormat) {\n        return this.dayFormat;\n      }\n      var options = {\n        timeZone: 'UTC',\n        day: 'numeric'\n      };\n      return createNativeLocaleFormatter(this.currentLocale, function (_tms, _short) {\n        return options;\n      });\n    },\n    weekdayFormatter: function weekdayFormatter() {\n      if (this.weekdayFormat) {\n        return this.weekdayFormat;\n      }\n      var longOptions = {\n        timeZone: 'UTC',\n        weekday: 'long'\n      };\n      var shortOptions = {\n        timeZone: 'UTC',\n        weekday: 'short'\n      };\n      return createNativeLocaleFormatter(this.currentLocale, function (_tms, _short2) {\n        return _short2 ? shortOptions : longOptions;\n      });\n    }\n  },\n  methods: {\n    getRelativeClasses: function getRelativeClasses(timestamp) {\n      var outside = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return {\n        'v-present': timestamp.present,\n        'v-past': timestamp.past,\n        'v-future': timestamp.future,\n        'v-outside': outside\n      };\n    },\n    getStartOfWeek: function getStartOfWeek(timestamp) {\n      return _getStartOfWeek(timestamp, this.parsedWeekdays, this.times.today);\n    },\n    getEndOfWeek: function getEndOfWeek(timestamp) {\n      return _getEndOfWeek(timestamp, this.parsedWeekdays, this.times.today);\n    },\n    getFormatter: function getFormatter(options) {\n      return createNativeLocaleFormatter(this.locale, function (_tms, _short) {\n        return options;\n      });\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}