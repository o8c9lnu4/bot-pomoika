{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.max-safe-integer.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"../../../src/components/VPagination/VPagination.sass\";\nimport VIcon from '../VIcon'; // Directives\n\nimport Resize from '../../directives/resize'; // Mixins\n\nimport Colorable from '../../mixins/colorable';\nimport Intersectable from '../../mixins/intersectable';\nimport Themeable from '../../mixins/themeable'; // Utilities\n\nimport mixins from '../../util/mixins';\n/* @vue/component */\n\nexport default mixins(Colorable, Intersectable({\n  onVisible: ['init']\n}), Themeable).extend({\n  name: 'v-pagination',\n  directives: {\n    Resize: Resize\n  },\n  props: {\n    circle: Boolean,\n    disabled: Boolean,\n    length: {\n      type: Number,\n      \"default\": 0,\n      validator: function validator(val) {\n        return val % 1 === 0;\n      }\n    },\n    nextIcon: {\n      type: String,\n      \"default\": '$next'\n    },\n    prevIcon: {\n      type: String,\n      \"default\": '$prev'\n    },\n    totalVisible: [Number, String],\n    value: {\n      type: Number,\n      \"default\": 0\n    },\n    pageAriaLabel: {\n      type: String,\n      \"default\": '$vuetify.pagination.ariaLabel.page'\n    },\n    currentPageAriaLabel: {\n      type: String,\n      \"default\": '$vuetify.pagination.ariaLabel.currentPage'\n    },\n    previousAriaLabel: {\n      type: String,\n      \"default\": '$vuetify.pagination.ariaLabel.previous'\n    },\n    nextAriaLabel: {\n      type: String,\n      \"default\": '$vuetify.pagination.ariaLabel.next'\n    },\n    wrapperAriaLabel: {\n      type: String,\n      \"default\": '$vuetify.pagination.ariaLabel.wrapper'\n    }\n  },\n  data: function data() {\n    return {\n      maxButtons: 0,\n      selected: null\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread({\n        'v-pagination': true,\n        'v-pagination--circle': this.circle,\n        'v-pagination--disabled': this.disabled\n      }, this.themeClasses);\n    },\n    items: function items() {\n      var totalVisible = parseInt(this.totalVisible, 10);\n      if (totalVisible === 0 || isNaN(this.length) || this.length > Number.MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var maxLength = Math.min(Math.max(0, totalVisible) || this.length, Math.max(0, this.maxButtons) || this.length, this.length);\n      if (this.length <= maxLength) {\n        return this.range(1, this.length);\n      }\n      var even = maxLength % 2 === 0 ? 1 : 0;\n      var left = Math.floor(maxLength / 2);\n      var right = this.length - left + 1 + even;\n      if (this.value > left && this.value < right) {\n        var firstItem = 1;\n        var lastItem = this.length;\n        var start = this.value - left + 2;\n        var end = this.value + left - 2 - even;\n        var secondItem = start - 1 === firstItem + 1 ? 2 : '...';\n        var beforeLastItem = end + 1 === lastItem - 1 ? end + 1 : '...';\n        return [1, secondItem].concat(_toConsumableArray(this.range(start, end)), [beforeLastItem, this.length]);\n      } else if (this.value === left) {\n        var _end = this.value + left - 1 - even;\n        return [].concat(_toConsumableArray(this.range(1, _end)), ['...', this.length]);\n      } else if (this.value === right) {\n        var _start = this.value - left + 1;\n        return [1, '...'].concat(_toConsumableArray(this.range(_start, this.length)));\n      } else {\n        return [].concat(_toConsumableArray(this.range(1, left)), ['...'], _toConsumableArray(this.range(right, this.length)));\n      }\n    }\n  },\n  watch: {\n    value: function value() {\n      this.init();\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.init();\n  },\n  methods: {\n    init: function init() {\n      var _this = this;\n      this.selected = null;\n      this.onResize();\n      this.$nextTick(this.onResize); // TODO: Change this (f75dee3a, cbdf7caa)\n\n      setTimeout(function () {\n        return _this.selected = _this.value;\n      }, 100);\n    },\n    onResize: function onResize() {\n      var width = this.$el && this.$el.parentElement ? this.$el.parentElement.clientWidth : window.innerWidth;\n      this.maxButtons = Math.floor((width - 96) / 42);\n    },\n    next: function next(e) {\n      e.preventDefault();\n      this.$emit('input', this.value + 1);\n      this.$emit('next');\n    },\n    previous: function previous(e) {\n      e.preventDefault();\n      this.$emit('input', this.value - 1);\n      this.$emit('previous');\n    },\n    range: function range(from, to) {\n      var range = [];\n      from = from > 0 ? from : 1;\n      for (var i = from; i <= to; i++) {\n        range.push(i);\n      }\n      return range;\n    },\n    genIcon: function genIcon(h, icon, disabled, fn, label) {\n      return h('li', [h('button', {\n        staticClass: 'v-pagination__navigation',\n        \"class\": {\n          'v-pagination__navigation--disabled': disabled\n        },\n        attrs: {\n          disabled: disabled,\n          type: 'button',\n          'aria-label': label\n        },\n        on: disabled ? {} : {\n          click: fn\n        }\n      }, [h(VIcon, [icon])])]);\n    },\n    genItem: function genItem(h, i) {\n      var _this2 = this;\n      var color = i === this.value && (this.color || 'primary');\n      var isCurrentPage = i === this.value;\n      var ariaLabel = isCurrentPage ? this.currentPageAriaLabel : this.pageAriaLabel;\n      return h('button', this.setBackgroundColor(color, {\n        staticClass: 'v-pagination__item',\n        \"class\": {\n          'v-pagination__item--active': i === this.value\n        },\n        attrs: {\n          type: 'button',\n          'aria-current': isCurrentPage,\n          'aria-label': this.$vuetify.lang.t(ariaLabel, i)\n        },\n        on: {\n          click: function click() {\n            return _this2.$emit('input', i);\n          }\n        }\n      }), [i.toString()]);\n    },\n    genItems: function genItems(h) {\n      var _this3 = this;\n      return this.items.map(function (i, index) {\n        return h('li', {\n          key: index\n        }, [isNaN(Number(i)) ? h('span', {\n          \"class\": 'v-pagination__more'\n        }, [i.toString()]) : _this3.genItem(h, i)]);\n      });\n    },\n    genList: function genList(h, children) {\n      return h('ul', {\n        directives: [{\n          modifiers: {\n            quiet: true\n          },\n          name: 'resize',\n          value: this.onResize\n        }],\n        \"class\": this.classes\n      }, children);\n    }\n  },\n  render: function render(h) {\n    var children = [this.genIcon(h, this.$vuetify.rtl ? this.nextIcon : this.prevIcon, this.value <= 1, this.previous, this.$vuetify.lang.t(this.previousAriaLabel)), this.genItems(h), this.genIcon(h, this.$vuetify.rtl ? this.prevIcon : this.nextIcon, this.value >= this.length, this.next, this.$vuetify.lang.t(this.nextAriaLabel))];\n    return h('nav', {\n      attrs: {\n        role: 'navigation',\n        'aria-label': this.$vuetify.lang.t(this.wrapperAriaLabel)\n      }\n    }, [this.genList(h, children)]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}