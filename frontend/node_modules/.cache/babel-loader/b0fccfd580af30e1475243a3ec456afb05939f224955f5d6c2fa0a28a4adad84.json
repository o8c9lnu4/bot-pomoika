{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.timers.js\";\n// Styles\nimport \"../../../src/components/VMenu/VMenu.sass\"; // Components\n\nimport { VThemeProvider } from '../VThemeProvider'; // Mixins\n\nimport Activatable from '../../mixins/activatable';\nimport Delayable from '../../mixins/delayable';\nimport Dependent from '../../mixins/dependent';\nimport Menuable from '../../mixins/menuable';\nimport Returnable from '../../mixins/returnable';\nimport Roundable from '../../mixins/roundable';\nimport Themeable from '../../mixins/themeable'; // Directives\n\nimport ClickOutside from '../../directives/click-outside';\nimport Resize from '../../directives/resize'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { removed } from '../../util/console';\nimport { convertToUnit, keyCodes } from '../../util/helpers';\nimport goTo from '../../services/goto';\nvar baseMixins = mixins(Dependent, Delayable, Returnable, Roundable, Themeable, Menuable);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'v-menu',\n  directives: {\n    ClickOutside: ClickOutside,\n    Resize: Resize\n  },\n  provide: function provide() {\n    return {\n      isInMenu: true,\n      // Pass theme through to default slot\n      theme: this.theme\n    };\n  },\n  props: {\n    auto: Boolean,\n    closeOnClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    closeOnContentClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    disabled: Boolean,\n    disableKeys: Boolean,\n    maxHeight: {\n      type: [Number, String],\n      \"default\": 'auto'\n    },\n    offsetX: Boolean,\n    offsetY: Boolean,\n    openOnHover: Boolean,\n    origin: {\n      type: String,\n      \"default\": 'top left'\n    },\n    transition: {\n      type: [Boolean, String],\n      \"default\": 'v-menu-transition'\n    }\n  },\n  data: function data() {\n    return {\n      calculatedTopAuto: 0,\n      defaultOffset: 8,\n      hasJustFocused: false,\n      listIndex: -1,\n      resizeTimeout: 0,\n      selectedIndex: null,\n      tiles: []\n    };\n  },\n  computed: {\n    activeTile: function activeTile() {\n      return this.tiles[this.listIndex];\n    },\n    calculatedLeft: function calculatedLeft() {\n      var menuWidth = Math.max(this.dimensions.content.width, parseFloat(this.calculatedMinWidth));\n      if (!this.auto) return this.calcLeft(menuWidth) || '0';\n      return convertToUnit(this.calcXOverflow(this.calcLeftAuto(), menuWidth)) || '0';\n    },\n    calculatedMaxHeight: function calculatedMaxHeight() {\n      var height = this.auto ? '200px' : convertToUnit(this.maxHeight);\n      return height || '0';\n    },\n    calculatedMaxWidth: function calculatedMaxWidth() {\n      return convertToUnit(this.maxWidth) || '0';\n    },\n    calculatedMinWidth: function calculatedMinWidth() {\n      if (this.minWidth) {\n        return convertToUnit(this.minWidth) || '0';\n      }\n      var minWidth = Math.min(this.dimensions.activator.width + Number(this.nudgeWidth) + (this.auto ? 16 : 0), Math.max(this.pageWidth - 24, 0));\n      var calculatedMaxWidth = isNaN(parseInt(this.calculatedMaxWidth)) ? minWidth : parseInt(this.calculatedMaxWidth);\n      return convertToUnit(Math.min(calculatedMaxWidth, minWidth)) || '0';\n    },\n    calculatedTop: function calculatedTop() {\n      var top = !this.auto ? this.calcTop() : convertToUnit(this.calcYOverflow(this.calculatedTopAuto));\n      return top || '0';\n    },\n    hasClickableTiles: function hasClickableTiles() {\n      return Boolean(this.tiles.find(function (tile) {\n        return tile.tabIndex > -1;\n      }));\n    },\n    styles: function styles() {\n      return {\n        maxHeight: this.calculatedMaxHeight,\n        minWidth: this.calculatedMinWidth,\n        maxWidth: this.calculatedMaxWidth,\n        top: this.calculatedTop,\n        left: this.calculatedLeft,\n        transformOrigin: this.origin,\n        zIndex: this.zIndex || this.activeZIndex\n      };\n    }\n  },\n  watch: {\n    isActive: function isActive(val) {\n      if (!val) this.listIndex = -1;\n    },\n    isContentActive: function isContentActive(val) {\n      this.hasJustFocused = val;\n    },\n    listIndex: function listIndex(next, prev) {\n      if (next in this.tiles) {\n        var tile = this.tiles[next];\n        tile.classList.add('v-list-item--highlighted');\n        var scrollTop = this.$refs.content.scrollTop;\n        var contentHeight = this.$refs.content.clientHeight;\n        if (scrollTop > tile.offsetTop - 8) {\n          goTo(tile.offsetTop - tile.clientHeight, {\n            appOffset: false,\n            duration: 300,\n            container: this.$refs.content\n          });\n        } else if (scrollTop + contentHeight < tile.offsetTop + tile.clientHeight + 8) {\n          goTo(tile.offsetTop - contentHeight + tile.clientHeight * 2, {\n            appOffset: false,\n            duration: 300,\n            container: this.$refs.content\n          });\n        }\n      }\n      prev in this.tiles && this.tiles[prev].classList.remove('v-list-item--highlighted');\n    }\n  },\n  created: function created() {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('full-width')) {\n      removed('full-width', this);\n    }\n  },\n  mounted: function mounted() {\n    this.isActive && this.callActivate();\n  },\n  methods: {\n    activate: function activate() {\n      var _this = this;\n      // Update coordinates and dimensions of menu\n      // and its activator\n      this.updateDimensions(); // Start the transition\n\n      requestAnimationFrame(function () {\n        // Once transitioning, calculate scroll and top position\n        _this.startTransition().then(function () {\n          if (_this.$refs.content) {\n            _this.calculatedTopAuto = _this.calcTopAuto();\n            _this.auto && (_this.$refs.content.scrollTop = _this.calcScrollPosition());\n          }\n        });\n      });\n    },\n    calcScrollPosition: function calcScrollPosition() {\n      var $el = this.$refs.content;\n      var activeTile = $el.querySelector('.v-list-item--active');\n      var maxScrollTop = $el.scrollHeight - $el.offsetHeight;\n      return activeTile ? Math.min(maxScrollTop, Math.max(0, activeTile.offsetTop - $el.offsetHeight / 2 + activeTile.offsetHeight / 2)) : $el.scrollTop;\n    },\n    calcLeftAuto: function calcLeftAuto() {\n      return parseInt(this.dimensions.activator.left - this.defaultOffset * 2);\n    },\n    calcTopAuto: function calcTopAuto() {\n      var $el = this.$refs.content;\n      var activeTile = $el.querySelector('.v-list-item--active');\n      if (!activeTile) {\n        this.selectedIndex = null;\n      }\n      if (this.offsetY || !activeTile) {\n        return this.computedTop;\n      }\n      this.selectedIndex = Array.from(this.tiles).indexOf(activeTile);\n      var tileDistanceFromMenuTop = activeTile.offsetTop - this.calcScrollPosition();\n      var firstTileOffsetTop = $el.querySelector('.v-list-item').offsetTop;\n      return this.computedTop - tileDistanceFromMenuTop - firstTileOffsetTop - 1;\n    },\n    changeListIndex: function changeListIndex(e) {\n      // For infinite scroll and autocomplete, re-evaluate children\n      this.getTiles();\n      if (!this.isActive || !this.hasClickableTiles) {\n        return;\n      } else if (e.keyCode === keyCodes.tab) {\n        this.isActive = false;\n        return;\n      } else if (e.keyCode === keyCodes.down) {\n        this.nextTile();\n      } else if (e.keyCode === keyCodes.up) {\n        this.prevTile();\n      } else if (e.keyCode === keyCodes.end) {\n        this.lastTile();\n      } else if (e.keyCode === keyCodes.home) {\n        this.firstTile();\n      } else if (e.keyCode === keyCodes.enter && this.listIndex !== -1) {\n        this.tiles[this.listIndex].click();\n      } else {\n        return;\n      } // One of the conditions was met, prevent default action (#2988)\n\n      e.preventDefault();\n    },\n    closeConditional: function closeConditional(e) {\n      var target = e.target;\n      return this.isActive && !this._isDestroyed && this.closeOnClick && !this.$refs.content.contains(target);\n    },\n    genActivatorAttributes: function genActivatorAttributes() {\n      var attributes = Activatable.options.methods.genActivatorAttributes.call(this);\n      if (this.activeTile && this.activeTile.id) {\n        return _objectSpread(_objectSpread({}, attributes), {}, {\n          'aria-activedescendant': this.activeTile.id\n        });\n      }\n      return attributes;\n    },\n    genActivatorListeners: function genActivatorListeners() {\n      var listeners = Menuable.options.methods.genActivatorListeners.call(this);\n      if (!this.disableKeys) {\n        listeners.keydown = this.onKeyDown;\n      }\n      return listeners;\n    },\n    genTransition: function genTransition() {\n      var content = this.genContent();\n      if (!this.transition) return content;\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition\n        }\n      }, [content]);\n    },\n    genDirectives: function genDirectives() {\n      var _this2 = this;\n      var directives = [{\n        name: 'show',\n        value: this.isContentActive\n      }]; // Do not add click outside for hover menu\n\n      if (!this.openOnHover && this.closeOnClick) {\n        directives.push({\n          name: 'click-outside',\n          value: {\n            handler: function handler() {\n              _this2.isActive = false;\n            },\n            closeConditional: this.closeConditional,\n            include: function include() {\n              return [_this2.$el].concat(_toConsumableArray(_this2.getOpenDependentElements()));\n            }\n          }\n        });\n      }\n      return directives;\n    },\n    genContent: function genContent() {\n      var _this3 = this;\n      var options = {\n        attrs: _objectSpread(_objectSpread({}, this.getScopeIdAttrs()), {}, {\n          role: 'role' in this.$attrs ? this.$attrs.role : 'menu'\n        }),\n        staticClass: 'v-menu__content',\n        \"class\": _objectSpread(_objectSpread(_objectSpread({}, this.rootThemeClasses), this.roundedClasses), {}, _defineProperty({\n          'v-menu__content--auto': this.auto,\n          'v-menu__content--fixed': this.activatorFixed,\n          menuable__content__active: this.isActive\n        }, this.contentClass.trim(), true)),\n        style: this.styles,\n        directives: this.genDirectives(),\n        ref: 'content',\n        on: {\n          click: function click(e) {\n            var target = e.target;\n            if (target.getAttribute('disabled')) return;\n            if (_this3.closeOnContentClick) _this3.isActive = false;\n          },\n          keydown: this.onKeyDown\n        }\n      };\n      if (this.$listeners.scroll) {\n        options.on = options.on || {};\n        options.on.scroll = this.$listeners.scroll;\n      }\n      if (!this.disabled && this.openOnHover) {\n        options.on = options.on || {};\n        options.on.mouseenter = this.mouseEnterHandler;\n      }\n      if (this.openOnHover) {\n        options.on = options.on || {};\n        options.on.mouseleave = this.mouseLeaveHandler;\n      }\n      return this.$createElement('div', options, this.getContentSlot());\n    },\n    getTiles: function getTiles() {\n      if (!this.$refs.content) return;\n      this.tiles = Array.from(this.$refs.content.querySelectorAll('.v-list-item, .v-divider, .v-subheader'));\n    },\n    mouseEnterHandler: function mouseEnterHandler() {\n      var _this4 = this;\n      this.runDelay('open', function () {\n        if (_this4.hasJustFocused) return;\n        _this4.hasJustFocused = true;\n      });\n    },\n    mouseLeaveHandler: function mouseLeaveHandler(e) {\n      var _this5 = this;\n      // Prevent accidental re-activation\n      this.runDelay('close', function () {\n        var _a;\n        if ((_a = _this5.$refs.content) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) return;\n        requestAnimationFrame(function () {\n          _this5.isActive = false;\n          _this5.callDeactivate();\n        });\n      });\n    },\n    nextTile: function nextTile() {\n      var tile = this.tiles[this.listIndex + 1];\n      if (!tile) {\n        if (!this.tiles.length) return;\n        this.listIndex = -1;\n        this.nextTile();\n        return;\n      }\n      this.listIndex++;\n      if (tile.tabIndex === -1) this.nextTile();\n    },\n    prevTile: function prevTile() {\n      var tile = this.tiles[this.listIndex - 1];\n      if (!tile) {\n        if (!this.tiles.length) return;\n        this.listIndex = this.tiles.length;\n        this.prevTile();\n        return;\n      }\n      this.listIndex--;\n      if (tile.tabIndex === -1) this.prevTile();\n    },\n    lastTile: function lastTile() {\n      var tile = this.tiles[this.tiles.length - 1];\n      if (!tile) return;\n      this.listIndex = this.tiles.length - 1;\n      if (tile.tabIndex === -1) this.prevTile();\n    },\n    firstTile: function firstTile() {\n      var tile = this.tiles[0];\n      if (!tile) return;\n      this.listIndex = 0;\n      if (tile.tabIndex === -1) this.nextTile();\n    },\n    onKeyDown: function onKeyDown(e) {\n      var _this6 = this;\n      if (e.keyCode === keyCodes.esc) {\n        // Wait for dependent elements to close first\n        setTimeout(function () {\n          _this6.isActive = false;\n        });\n        var activator = this.getActivator();\n        this.$nextTick(function () {\n          return activator && activator.focus();\n        });\n      } else if (!this.isActive && [keyCodes.up, keyCodes.down].includes(e.keyCode)) {\n        this.isActive = true;\n      } // Allow for isActive watcher to generate tile list\n\n      this.$nextTick(function () {\n        return _this6.changeListIndex(e);\n      });\n    },\n    onResize: function onResize() {\n      if (!this.isActive) return; // Account for screen resize\n      // and orientation change\n      // eslint-disable-next-line no-unused-expressions\n\n      this.$refs.content.offsetWidth;\n      this.updateDimensions(); // When resizing to a smaller width\n      // content width is evaluated before\n      // the new activator width has been\n      // set, causing it to not size properly\n      // hacky but will revisit in the future\n\n      clearTimeout(this.resizeTimeout);\n      this.resizeTimeout = window.setTimeout(this.updateDimensions, 100);\n    }\n  },\n  render: function render(h) {\n    var _this7 = this;\n    var data = {\n      staticClass: 'v-menu',\n      \"class\": {\n        'v-menu--attached': this.attach === '' || this.attach === true || this.attach === 'attach'\n      },\n      directives: [{\n        arg: '500',\n        name: 'resize',\n        value: this.onResize\n      }]\n    };\n    return h('div', data, [!this.activator && this.genActivator(), this.showLazyContent(function () {\n      return [_this7.$createElement(VThemeProvider, {\n        props: {\n          root: true,\n          light: _this7.light,\n          dark: _this7.dark\n        }\n      }, [_this7.genTransition()])];\n    })]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}