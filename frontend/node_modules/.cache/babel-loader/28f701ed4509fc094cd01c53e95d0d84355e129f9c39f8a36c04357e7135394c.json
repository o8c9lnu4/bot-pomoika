{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'mouse',\n  methods: {\n    getDefaultMouseEventHandlers: function getDefaultMouseEventHandlers(suffix, getEvent) {\n      var listeners = Object.keys(this.$listeners).filter(function (key) {\n        return key.endsWith(suffix);\n      }).reduce(function (acc, key) {\n        acc[key] = {\n          event: key.slice(0, -suffix.length)\n        };\n        return acc;\n      }, {});\n      return this.getMouseEventHandlers(_objectSpread(_objectSpread({}, listeners), {}, _defineProperty({}, 'contextmenu' + suffix, {\n        event: 'contextmenu',\n        prevent: true,\n        result: false\n      })), getEvent);\n    },\n    getMouseEventHandlers: function getMouseEventHandlers(events, getEvent) {\n      var _this = this;\n      var on = {};\n      var _loop = function _loop(event) {\n        var eventOptions = events[event];\n        if (!_this.$listeners[event]) return 1; // continue\n        // TODO somehow pull in modifiers\n\n        var prefix = eventOptions.passive ? '&' : (eventOptions.once ? '~' : '') + (eventOptions.capture ? '!' : '');\n        var key = prefix + eventOptions.event;\n        var handler = function handler(e) {\n          var _a, _b;\n          var mouseEvent = e;\n          if (eventOptions.button === undefined || mouseEvent.buttons > 0 && mouseEvent.button === eventOptions.button) {\n            if (eventOptions.prevent) {\n              e.preventDefault();\n            }\n            if (eventOptions.stop) {\n              e.stopPropagation();\n            } // Due to TouchEvent target always returns the element that is first placed\n            // Even if touch point has since moved outside the interactive area of that element\n            // Ref: https://developer.mozilla.org/en-US/docs/Web/API/Touch/target\n            // This block of code aims to make sure touchEvent is always dispatched from the element that is being pointed at\n\n            if (e && 'touches' in e) {\n              var classSeparator = ' ';\n              var eventTargetClasses = (_a = e.currentTarget) === null || _a === void 0 ? void 0 : _a.className.split(classSeparator);\n              var currentTargets = document.elementsFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY); // Get \"the same kind\" current hovering target by checking\n              // If element has the same class of initial touch start element (which has touch event listener registered)\n\n              var currentTarget = currentTargets.find(function (t) {\n                return t.className.split(classSeparator).some(function (c) {\n                  return eventTargetClasses.includes(c);\n                });\n              });\n              if (currentTarget && !((_b = e.target) === null || _b === void 0 ? void 0 : _b.isSameNode(currentTarget))) {\n                currentTarget.dispatchEvent(new TouchEvent(e.type, {\n                  changedTouches: e.changedTouches,\n                  targetTouches: e.targetTouches,\n                  touches: e.touches\n                }));\n                return;\n              }\n            }\n            _this.$emit(event, getEvent(e), e);\n          }\n          return eventOptions.result;\n        };\n        if (key in on) {\n          /* istanbul ignore next */\n          if (Array.isArray(on[key])) {\n            on[key].push(handler);\n          } else {\n            on[key] = [on[key], handler];\n          }\n        } else {\n          on[key] = handler;\n        }\n      };\n      for (var event in events) {\n        if (_loop(event)) continue;\n      }\n      return on;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}