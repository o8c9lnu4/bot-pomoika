{"ast":null,"code":"import _typeof from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n// Styles\n// import '../../stylus/components/_calendar-daily.styl'\n// Mixins\nimport CalendarWithEvents from './mixins/calendar-with-events'; // Util\n\nimport props from './util/props';\nimport { DAYS_IN_MONTH_MAX, DAY_MIN, DAYS_IN_WEEK, parseTimestamp as _parseTimestamp, validateTimestamp, relativeDays, nextDay, prevDay, copyTimestamp, updateFormatted, updateWeekday, updateRelative, getStartOfMonth, getEndOfMonth, timestampToDate as _timestampToDate } from './util/timestamp'; // Calendars\n\nimport VCalendarMonthly from './VCalendarMonthly';\nimport VCalendarDaily from './VCalendarDaily';\nimport VCalendarWeekly from './VCalendarWeekly';\nimport VCalendarCategory from './VCalendarCategory';\nimport { getParsedCategories } from './util/parser';\n/* @vue/component */\n\nexport default CalendarWithEvents.extend({\n  name: 'v-calendar',\n  props: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, props.calendar), props.weeks), props.intervals), props.category),\n  data: function data() {\n    return {\n      lastStart: null,\n      lastEnd: null\n    };\n  },\n  computed: {\n    parsedValue: function parsedValue() {\n      return validateTimestamp(this.value) ? _parseTimestamp(this.value, true) : this.parsedStart || this.times.today;\n    },\n    parsedCategoryDays: function parsedCategoryDays() {\n      return parseInt(this.categoryDays) || 1;\n    },\n    renderProps: function renderProps() {\n      var around = this.parsedValue;\n      var component = null;\n      var maxDays = this.maxDays;\n      var weekdays = this.parsedWeekdays;\n      var categories = this.parsedCategories;\n      var start = around;\n      var end = around;\n      switch (this.type) {\n        case 'month':\n          component = VCalendarMonthly;\n          start = getStartOfMonth(around);\n          end = getEndOfMonth(around);\n          break;\n        case 'week':\n          component = VCalendarDaily;\n          start = this.getStartOfWeek(around);\n          end = this.getEndOfWeek(around);\n          maxDays = 7;\n          break;\n        case 'day':\n          component = VCalendarDaily;\n          maxDays = 1;\n          weekdays = [start.weekday];\n          break;\n        case '4day':\n          component = VCalendarDaily;\n          end = relativeDays(copyTimestamp(end), nextDay, 3);\n          updateFormatted(end);\n          maxDays = 4;\n          weekdays = [start.weekday, (start.weekday + 1) % 7, (start.weekday + 2) % 7, (start.weekday + 3) % 7];\n          break;\n        case 'custom-weekly':\n          component = VCalendarWeekly;\n          start = this.parsedStart || around;\n          end = this.parsedEnd;\n          break;\n        case 'custom-daily':\n          component = VCalendarDaily;\n          start = this.parsedStart || around;\n          end = this.parsedEnd;\n          break;\n        case 'category':\n          var days = this.parsedCategoryDays;\n          component = VCalendarCategory;\n          end = relativeDays(copyTimestamp(end), nextDay, days);\n          updateFormatted(end);\n          maxDays = days;\n          weekdays = [];\n          for (var i = 0; i < days; i++) {\n            weekdays.push((start.weekday + i) % 7);\n          }\n          categories = this.getCategoryList(categories);\n          break;\n        default:\n          throw new Error(this.type + ' is not a valid Calendar type');\n      }\n      return {\n        component: component,\n        start: start,\n        end: end,\n        maxDays: maxDays,\n        weekdays: weekdays,\n        categories: categories\n      };\n    },\n    eventWeekdays: function eventWeekdays() {\n      return this.renderProps.weekdays;\n    },\n    categoryMode: function categoryMode() {\n      return this.type === 'category';\n    },\n    title: function title() {\n      var _this$renderProps = this.renderProps,\n        start = _this$renderProps.start,\n        end = _this$renderProps.end;\n      var spanYears = start.year !== end.year;\n      var spanMonths = spanYears || start.month !== end.month;\n      if (spanYears) {\n        return this.monthShortFormatter(start, true) + ' ' + start.year + ' - ' + this.monthShortFormatter(end, true) + ' ' + end.year;\n      }\n      if (spanMonths) {\n        return this.monthShortFormatter(start, true) + ' - ' + this.monthShortFormatter(end, true) + ' ' + end.year;\n      } else {\n        return this.monthLongFormatter(start, false) + ' ' + start.year;\n      }\n    },\n    monthLongFormatter: function monthLongFormatter() {\n      return this.getFormatter({\n        timeZone: 'UTC',\n        month: 'long'\n      });\n    },\n    monthShortFormatter: function monthShortFormatter() {\n      return this.getFormatter({\n        timeZone: 'UTC',\n        month: 'short'\n      });\n    },\n    parsedCategories: function parsedCategories() {\n      return getParsedCategories(this.categories, this.categoryText);\n    }\n  },\n  watch: {\n    renderProps: 'checkChange'\n  },\n  mounted: function mounted() {\n    this.updateEventVisibility();\n    this.checkChange();\n  },\n  updated: function updated() {\n    window.requestAnimationFrame(this.updateEventVisibility);\n  },\n  methods: {\n    checkChange: function checkChange() {\n      var lastStart = this.lastStart,\n        lastEnd = this.lastEnd;\n      var _this$renderProps2 = this.renderProps,\n        start = _this$renderProps2.start,\n        end = _this$renderProps2.end;\n      if (!lastStart || !lastEnd || start.date !== lastStart.date || end.date !== lastEnd.date) {\n        this.lastStart = start;\n        this.lastEnd = end;\n        this.$emit('change', {\n          start: start,\n          end: end\n        });\n      }\n    },\n    move: function move() {\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var moved = copyTimestamp(this.parsedValue);\n      var forward = amount > 0;\n      var mover = forward ? nextDay : prevDay;\n      var limit = forward ? DAYS_IN_MONTH_MAX : DAY_MIN;\n      var times = forward ? amount : -amount;\n      while (--times >= 0) {\n        switch (this.type) {\n          case 'month':\n            moved.day = limit;\n            mover(moved);\n            break;\n          case 'week':\n            relativeDays(moved, mover, DAYS_IN_WEEK);\n            break;\n          case 'day':\n            relativeDays(moved, mover, 1);\n            break;\n          case '4day':\n            relativeDays(moved, mover, 4);\n            break;\n          case 'category':\n            relativeDays(moved, mover, this.parsedCategoryDays);\n            break;\n        }\n      }\n      updateWeekday(moved);\n      updateFormatted(moved);\n      updateRelative(moved, this.times.now);\n      if (this.value instanceof Date) {\n        this.$emit('input', _timestampToDate(moved));\n      } else if (typeof this.value === 'number') {\n        this.$emit('input', _timestampToDate(moved).getTime());\n      } else {\n        this.$emit('input', moved.date);\n      }\n      this.$emit('moved', moved);\n    },\n    next: function next() {\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.move(amount);\n    },\n    prev: function prev() {\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.move(-amount);\n    },\n    timeToY: function timeToY(time) {\n      var clamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var c = this.$children[0];\n      if (c && c.timeToY) {\n        return c.timeToY(time, clamp);\n      } else {\n        return false;\n      }\n    },\n    timeDelta: function timeDelta(time) {\n      var c = this.$children[0];\n      if (c && c.timeDelta) {\n        return c.timeDelta(time);\n      } else {\n        return false;\n      }\n    },\n    minutesToPixels: function minutesToPixels(minutes) {\n      var c = this.$children[0];\n      if (c && c.minutesToPixels) {\n        return c.minutesToPixels(minutes);\n      } else {\n        return -1;\n      }\n    },\n    scrollToTime: function scrollToTime(time) {\n      var c = this.$children[0];\n      if (c && c.scrollToTime) {\n        return c.scrollToTime(time);\n      } else {\n        return false;\n      }\n    },\n    parseTimestamp: function parseTimestamp(input, required) {\n      return _parseTimestamp(input, required, this.times.now);\n    },\n    timestampToDate: function timestampToDate(timestamp) {\n      return _timestampToDate(timestamp);\n    },\n    getCategoryList: function getCategoryList(categories) {\n      var _this = this;\n      if (!this.noEvents) {\n        var categoryMap = categories.reduce(function (map, category, index) {\n          if (_typeof(category) === 'object' && category.categoryName) map[category.categoryName] = {\n            index: index,\n            count: 0\n          };else if (typeof category === 'string') map[category] = {\n            index: index,\n            count: 0\n          };\n          return map;\n        }, {});\n        if (!this.categoryHideDynamic || !this.categoryShowAll) {\n          var categoryLength = categories.length;\n          this.parsedEvents.forEach(function (ev) {\n            var category = ev.category;\n            if (typeof category !== 'string') {\n              category = _this.categoryForInvalid;\n            }\n            if (!category) {\n              return;\n            }\n            if (category in categoryMap) {\n              categoryMap[category].count++;\n            } else if (!_this.categoryHideDynamic) {\n              categoryMap[category] = {\n                index: categoryLength++,\n                count: 1\n              };\n            }\n          });\n        }\n        if (!this.categoryShowAll) {\n          for (var category in categoryMap) {\n            if (categoryMap[category].count === 0) {\n              delete categoryMap[category];\n            }\n          }\n        }\n        categories = categories.filter(function (category) {\n          if (_typeof(category) === 'object' && category.categoryName) {\n            return categoryMap.hasOwnProperty(category.categoryName);\n          } else if (typeof category === 'string') {\n            return categoryMap.hasOwnProperty(category);\n          }\n          return false;\n        });\n      }\n      return categories;\n    }\n  },\n  render: function render(h) {\n    var _this2 = this;\n    var _this$renderProps3 = this.renderProps,\n      start = _this$renderProps3.start,\n      end = _this$renderProps3.end,\n      maxDays = _this$renderProps3.maxDays,\n      component = _this$renderProps3.component,\n      weekdays = _this$renderProps3.weekdays,\n      categories = _this$renderProps3.categories;\n    return h(component, {\n      staticClass: 'v-calendar',\n      \"class\": {\n        'v-calendar-events': !this.noEvents\n      },\n      props: _objectSpread(_objectSpread({}, this.$props), {}, {\n        start: start.date,\n        end: end.date,\n        maxDays: maxDays,\n        weekdays: weekdays,\n        categories: categories\n      }),\n      attrs: {\n        role: 'grid'\n      },\n      directives: [{\n        modifiers: {\n          quiet: true\n        },\n        name: 'resize',\n        value: this.updateEventVisibility\n      }],\n      on: _objectSpread(_objectSpread({}, this.$listeners), {}, {\n        'click:date': function clickDate(day, e) {\n          if (_this2.$listeners.input) {\n            _this2.$emit('input', day.date);\n          }\n          if (_this2.$listeners['click:date']) {\n            _this2.$emit('click:date', day, e);\n          }\n        }\n      }),\n      scopedSlots: this.getScopedSlots()\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}