{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.math.sign.js\";\n// Styles\nimport \"../../../src/components/VSlideGroup/VSlideGroup.sass\"; // Components\n\nimport VIcon from '../VIcon';\nimport { VFadeTransition } from '../transitions'; // Extensions\n\nimport { BaseItemGroup } from '../VItemGroup/VItemGroup'; // Mixins\n\nimport Mobile from '../../mixins/mobile'; // Directives\n\nimport Resize from '../../directives/resize';\nimport Touch from '../../directives/touch'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { composedPath } from '../../util/helpers';\nfunction bias(val) {\n  var c = 0.501;\n  var x = Math.abs(val);\n  return Math.sign(val) * (x / ((1 / c - 2) * (1 - x) + 1));\n}\nexport function calculateUpdatedOffset(selectedElement, widths, rtl, currentScrollOffset) {\n  var clientWidth = selectedElement.clientWidth;\n  var offsetLeft = rtl ? widths.content - selectedElement.offsetLeft - clientWidth : selectedElement.offsetLeft;\n  if (rtl) {\n    currentScrollOffset = -currentScrollOffset;\n  }\n  var totalWidth = widths.wrapper + currentScrollOffset;\n  var itemOffset = clientWidth + offsetLeft;\n  var additionalOffset = clientWidth * 0.4;\n  if (offsetLeft <= currentScrollOffset) {\n    currentScrollOffset = Math.max(offsetLeft - additionalOffset, 0);\n  } else if (totalWidth <= itemOffset) {\n    currentScrollOffset = Math.min(currentScrollOffset - (totalWidth - itemOffset - additionalOffset), widths.content - widths.wrapper);\n  }\n  return rtl ? -currentScrollOffset : currentScrollOffset;\n}\nexport function calculateCenteredOffset(selectedElement, widths, rtl) {\n  var offsetLeft = selectedElement.offsetLeft,\n    clientWidth = selectedElement.clientWidth;\n  if (rtl) {\n    var offsetCentered = widths.content - offsetLeft - clientWidth / 2 - widths.wrapper / 2;\n    return -Math.min(widths.content - widths.wrapper, Math.max(0, offsetCentered));\n  } else {\n    var _offsetCentered = offsetLeft + clientWidth / 2 - widths.wrapper / 2;\n    return Math.min(widths.content - widths.wrapper, Math.max(0, _offsetCentered));\n  }\n}\nexport var BaseSlideGroup = mixins(BaseItemGroup, Mobile).extend({\n  name: 'base-slide-group',\n  directives: {\n    Resize: Resize,\n    Touch: Touch\n  },\n  props: {\n    activeClass: {\n      type: String,\n      \"default\": 'v-slide-item--active'\n    },\n    centerActive: Boolean,\n    nextIcon: {\n      type: String,\n      \"default\": '$next'\n    },\n    prevIcon: {\n      type: String,\n      \"default\": '$prev'\n    },\n    showArrows: {\n      type: [Boolean, String],\n      validator: function validator(v) {\n        return typeof v === 'boolean' || ['always', 'desktop', 'mobile'].includes(v);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      isOverflowing: false,\n      resizeTimeout: 0,\n      startX: 0,\n      isSwipingHorizontal: false,\n      isSwiping: false,\n      scrollOffset: 0,\n      widths: {\n        content: 0,\n        wrapper: 0\n      }\n    };\n  },\n  computed: {\n    canTouch: function canTouch() {\n      return typeof window !== 'undefined';\n    },\n    __cachedNext: function __cachedNext() {\n      return this.genTransition('next');\n    },\n    __cachedPrev: function __cachedPrev() {\n      return this.genTransition('prev');\n    },\n    classes: function classes() {\n      return _objectSpread(_objectSpread({}, BaseItemGroup.options.computed.classes.call(this)), {}, {\n        'v-slide-group': true,\n        'v-slide-group--has-affixes': this.hasAffixes,\n        'v-slide-group--is-overflowing': this.isOverflowing\n      });\n    },\n    hasAffixes: function hasAffixes() {\n      switch (this.showArrows) {\n        // Always show arrows on desktop & mobile\n        case 'always':\n          return true;\n        // Always show arrows on desktop\n\n        case 'desktop':\n          return !this.isMobile;\n        // Show arrows on mobile when overflowing.\n        // This matches the default 2.2 behavior\n\n        case true:\n          return this.isOverflowing || Math.abs(this.scrollOffset) > 0;\n        // Always show on mobile\n\n        case 'mobile':\n          return this.isMobile || this.isOverflowing || Math.abs(this.scrollOffset) > 0;\n        // https://material.io/components/tabs#scrollable-tabs\n        // Always show arrows when\n        // overflowed on desktop\n\n        default:\n          return !this.isMobile && (this.isOverflowing || Math.abs(this.scrollOffset) > 0);\n      }\n    },\n    hasNext: function hasNext() {\n      if (!this.hasAffixes) return false;\n      var _this$widths = this.widths,\n        content = _this$widths.content,\n        wrapper = _this$widths.wrapper; // Check one scroll ahead to know the width of right-most item\n\n      return content > Math.abs(this.scrollOffset) + wrapper;\n    },\n    hasPrev: function hasPrev() {\n      return this.hasAffixes && this.scrollOffset !== 0;\n    }\n  },\n  watch: {\n    internalValue: 'setWidths',\n    // When overflow changes, the arrows alter\n    // the widths of the content and wrapper\n    // and need to be recalculated\n    isOverflowing: 'setWidths',\n    scrollOffset: function scrollOffset(val) {\n      if (this.$vuetify.rtl) val = -val;\n      var scroll = val <= 0 ? bias(-val) : val > this.widths.content - this.widths.wrapper ? -(this.widths.content - this.widths.wrapper) + bias(this.widths.content - this.widths.wrapper - val) : -val;\n      if (this.$vuetify.rtl) scroll = -scroll;\n      this.$refs.content.style.transform = \"translateX(\".concat(scroll, \"px)\");\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n    if (typeof ResizeObserver !== 'undefined') {\n      var obs = new ResizeObserver(function () {\n        _this.onResize();\n      });\n      obs.observe(this.$el);\n      obs.observe(this.$refs.content);\n      this.$on('hook:destroyed', function () {\n        obs.disconnect();\n      });\n    } else {\n      var itemsLength = 0;\n      this.$on('hook:beforeUpdate', function () {\n        var _a;\n        itemsLength = (((_a = _this.$refs.content) === null || _a === void 0 ? void 0 : _a.children) || []).length;\n      });\n      this.$on('hook:updated', function () {\n        var _a;\n        if (itemsLength === (((_a = _this.$refs.content) === null || _a === void 0 ? void 0 : _a.children) || []).length) return;\n        _this.setWidths();\n      });\n    }\n  },\n  methods: {\n    onScroll: function onScroll() {\n      this.$refs.wrapper.scrollLeft = 0;\n    },\n    onFocusin: function onFocusin(e) {\n      if (!this.isOverflowing) return; // Focused element is likely to be the root of an item, so a\n      // breadth-first search will probably find it in the first iteration\n      var _iterator = _createForOfIteratorHelper(composedPath(e)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var el = _step.value;\n          var _iterator2 = _createForOfIteratorHelper(this.items),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var vm = _step2.value;\n              if (vm.$el === el) {\n                this.scrollOffset = calculateUpdatedOffset(vm.$el, this.widths, this.$vuetify.rtl, this.scrollOffset);\n                return;\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    // Always generate next for scrollable hint\n    genNext: function genNext() {\n      var _this2 = this;\n      var slot = this.$scopedSlots.next ? this.$scopedSlots.next({}) : this.$slots.next || this.__cachedNext;\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__next',\n        \"class\": {\n          'v-slide-group__next--disabled': !this.hasNext\n        },\n        on: {\n          click: function click() {\n            return _this2.onAffixClick('next');\n          }\n        },\n        key: 'next'\n      }, [slot]);\n    },\n    genContent: function genContent() {\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__content',\n        ref: 'content',\n        on: {\n          focusin: this.onFocusin\n        }\n      }, this.$slots[\"default\"]);\n    },\n    genData: function genData() {\n      return {\n        \"class\": this.classes,\n        directives: [{\n          name: 'resize',\n          value: this.onResize\n        }]\n      };\n    },\n    genIcon: function genIcon(location) {\n      var icon = location;\n      if (this.$vuetify.rtl && location === 'prev') {\n        icon = 'next';\n      } else if (this.$vuetify.rtl && location === 'next') {\n        icon = 'prev';\n      }\n      var upperLocation = \"\".concat(location[0].toUpperCase()).concat(location.slice(1));\n      var hasAffix = this[\"has\".concat(upperLocation)];\n      if (!this.showArrows && !hasAffix) return null;\n      return this.$createElement(VIcon, {\n        props: {\n          disabled: !hasAffix\n        }\n      }, this[\"\".concat(icon, \"Icon\")]);\n    },\n    // Always generate prev for scrollable hint\n    genPrev: function genPrev() {\n      var _this3 = this;\n      var slot = this.$scopedSlots.prev ? this.$scopedSlots.prev({}) : this.$slots.prev || this.__cachedPrev;\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__prev',\n        \"class\": {\n          'v-slide-group__prev--disabled': !this.hasPrev\n        },\n        on: {\n          click: function click() {\n            return _this3.onAffixClick('prev');\n          }\n        },\n        key: 'prev'\n      }, [slot]);\n    },\n    genTransition: function genTransition(location) {\n      return this.$createElement(VFadeTransition, [this.genIcon(location)]);\n    },\n    genWrapper: function genWrapper() {\n      var _this4 = this;\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__wrapper',\n        directives: [{\n          name: 'touch',\n          value: {\n            start: function start(e) {\n              return _this4.overflowCheck(e, _this4.onTouchStart);\n            },\n            move: function move(e) {\n              return _this4.overflowCheck(e, _this4.onTouchMove);\n            },\n            end: function end(e) {\n              return _this4.overflowCheck(e, _this4.onTouchEnd);\n            }\n          }\n        }],\n        ref: 'wrapper',\n        on: {\n          scroll: this.onScroll\n        }\n      }, [this.genContent()]);\n    },\n    calculateNewOffset: function calculateNewOffset(direction, widths, rtl, currentScrollOffset) {\n      var sign = rtl ? -1 : 1;\n      var newAbosluteOffset = sign * currentScrollOffset + (direction === 'prev' ? -1 : 1) * widths.wrapper;\n      return sign * Math.max(Math.min(newAbosluteOffset, widths.content - widths.wrapper), 0);\n    },\n    onAffixClick: function onAffixClick(location) {\n      this.$emit(\"click:\".concat(location));\n      this.scrollTo(location);\n    },\n    onResize: function onResize() {\n      /* istanbul ignore next */\n      if (this._isDestroyed) return;\n      this.setWidths();\n    },\n    onTouchStart: function onTouchStart(e) {\n      var content = this.$refs.content;\n      this.startX = this.scrollOffset + e.touchstartX;\n      content.style.setProperty('transition', 'none');\n      content.style.setProperty('willChange', 'transform');\n    },\n    onTouchMove: function onTouchMove(e) {\n      if (!this.canTouch) return;\n      if (!this.isSwiping) {\n        // only calculate disableSwipeHorizontal during the first onTouchMove invoke\n        // in order to ensure disableSwipeHorizontal value is consistent between onTouchStart and onTouchEnd\n        var diffX = e.touchmoveX - e.touchstartX;\n        var diffY = e.touchmoveY - e.touchstartY;\n        this.isSwipingHorizontal = Math.abs(diffX) > Math.abs(diffY);\n        this.isSwiping = true;\n      }\n      if (this.isSwipingHorizontal) {\n        // sliding horizontally\n        this.scrollOffset = this.startX - e.touchmoveX; // temporarily disable window vertical scrolling\n\n        document.documentElement.style.overflowY = 'hidden';\n      }\n    },\n    onTouchEnd: function onTouchEnd() {\n      if (!this.canTouch) return;\n      var _this$$refs = this.$refs,\n        content = _this$$refs.content,\n        wrapper = _this$$refs.wrapper;\n      var maxScrollOffset = content.clientWidth - wrapper.clientWidth;\n      content.style.setProperty('transition', null);\n      content.style.setProperty('willChange', null);\n      if (this.$vuetify.rtl) {\n        /* istanbul ignore else */\n        if (this.scrollOffset > 0 || !this.isOverflowing) {\n          this.scrollOffset = 0;\n        } else if (this.scrollOffset <= -maxScrollOffset) {\n          this.scrollOffset = -maxScrollOffset;\n        }\n      } else {\n        /* istanbul ignore else */\n        if (this.scrollOffset < 0 || !this.isOverflowing) {\n          this.scrollOffset = 0;\n        } else if (this.scrollOffset >= maxScrollOffset) {\n          this.scrollOffset = maxScrollOffset;\n        }\n      }\n      this.isSwiping = false; // rollback whole page scrolling to default\n\n      document.documentElement.style.removeProperty('overflow-y');\n    },\n    overflowCheck: function overflowCheck(e, fn) {\n      e.stopPropagation();\n      this.isOverflowing && fn(e);\n    },\n    scrollIntoView\n    /* istanbul ignore next */: function scrollIntoView() {\n      if (!this.selectedItem && this.items.length) {\n        var lastItemPosition = this.items[this.items.length - 1].$el.getBoundingClientRect();\n        var wrapperPosition = this.$refs.wrapper.getBoundingClientRect();\n        if (this.$vuetify.rtl && wrapperPosition.right < lastItemPosition.right || !this.$vuetify.rtl && wrapperPosition.left > lastItemPosition.left) {\n          this.scrollTo('prev');\n        }\n      }\n      if (!this.selectedItem) {\n        return;\n      }\n      if (this.selectedIndex === 0 || !this.centerActive && !this.isOverflowing) {\n        this.scrollOffset = 0;\n      } else if (this.centerActive) {\n        this.scrollOffset = calculateCenteredOffset(this.selectedItem.$el, this.widths, this.$vuetify.rtl);\n      } else if (this.isOverflowing) {\n        this.scrollOffset = calculateUpdatedOffset(this.selectedItem.$el, this.widths, this.$vuetify.rtl, this.scrollOffset);\n      }\n    },\n    scrollTo\n    /* istanbul ignore next */: function scrollTo(location) {\n      this.scrollOffset = this.calculateNewOffset(location, {\n        // Force reflow\n        content: this.$refs.content ? this.$refs.content.clientWidth : 0,\n        wrapper: this.$refs.wrapper ? this.$refs.wrapper.clientWidth : 0\n      }, this.$vuetify.rtl, this.scrollOffset);\n    },\n    setWidths: function setWidths() {\n      var _this5 = this;\n      window.requestAnimationFrame(function () {\n        if (_this5._isDestroyed) return;\n        var _this5$$refs = _this5.$refs,\n          content = _this5$$refs.content,\n          wrapper = _this5$$refs.wrapper;\n        _this5.widths = {\n          content: content ? content.clientWidth : 0,\n          wrapper: wrapper ? wrapper.clientWidth : 0\n        }; // https://github.com/vuetifyjs/vuetify/issues/13212\n        // We add +1 to the wrappers width to prevent an issue where the `clientWidth`\n        // gets calculated wrongly by the browser if using a different zoom-level.\n\n        _this5.isOverflowing = _this5.widths.wrapper + 1 < _this5.widths.content;\n        _this5.scrollIntoView();\n      });\n    }\n  },\n  render: function render(h) {\n    return h('div', this.genData(), [this.genPrev(), this.genWrapper(), this.genNext()]);\n  }\n});\nexport default BaseSlideGroup.extend({\n  name: 'v-slide-group',\n  provide: function provide() {\n    return {\n      slideGroup: this\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}