{"ast":null,"code":"import _slicedToArray from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n// Styles\nimport \"../../../src/components/VChip/VChip.sass\";\nimport mixins from '../../util/mixins'; // Components\n\nimport { VExpandXTransition } from '../transitions';\nimport VIcon from '../VIcon'; // Mixins\n\nimport Colorable from '../../mixins/colorable';\nimport { factory as GroupableFactory } from '../../mixins/groupable';\nimport Themeable from '../../mixins/themeable';\nimport { factory as ToggleableFactory } from '../../mixins/toggleable';\nimport Routable from '../../mixins/routable';\nimport Sizeable from '../../mixins/sizeable'; // Utilities\n\nimport { breaking } from '../../util/console';\n/* @vue/component */\n\nexport default mixins(Colorable, Sizeable, Routable, Themeable, GroupableFactory('chipGroup'), ToggleableFactory('inputValue')).extend({\n  name: 'v-chip',\n  props: {\n    active: {\n      type: Boolean,\n      \"default\": true\n    },\n    activeClass: {\n      type: String,\n      \"default\": function _default() {\n        if (!this.chipGroup) return '';\n        return this.chipGroup.activeClass;\n      }\n    },\n    close: Boolean,\n    closeIcon: {\n      type: String,\n      \"default\": '$delete'\n    },\n    closeLabel: {\n      type: String,\n      \"default\": '$vuetify.close'\n    },\n    disabled: Boolean,\n    draggable: Boolean,\n    filter: Boolean,\n    filterIcon: {\n      type: String,\n      \"default\": '$complete'\n    },\n    label: Boolean,\n    link: Boolean,\n    outlined: Boolean,\n    pill: Boolean,\n    tag: {\n      type: String,\n      \"default\": 'span'\n    },\n    textColor: String,\n    value: null\n  },\n  data: function data() {\n    return {\n      proxyClass: 'v-chip--active'\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n        'v-chip': true\n      }, Routable.options.computed.classes.call(this)), {}, {\n        'v-chip--clickable': this.isClickable,\n        'v-chip--disabled': this.disabled,\n        'v-chip--draggable': this.draggable,\n        'v-chip--label': this.label,\n        'v-chip--link': this.isLink,\n        'v-chip--no-color': !this.color,\n        'v-chip--outlined': this.outlined,\n        'v-chip--pill': this.pill,\n        'v-chip--removable': this.hasClose\n      }, this.themeClasses), this.sizeableClasses), this.groupClasses);\n    },\n    hasClose: function hasClose() {\n      return Boolean(this.close);\n    },\n    isClickable: function isClickable() {\n      return Boolean(Routable.options.computed.isClickable.call(this) || this.chipGroup);\n    }\n  },\n  created: function created() {\n    var _this = this;\n    var breakingProps = [['outline', 'outlined'], ['selected', 'input-value'], ['value', 'active'], ['@input', '@active.sync']];\n    /* istanbul ignore next */\n\n    breakingProps.forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        original = _ref2[0],\n        replacement = _ref2[1];\n      if (_this.$attrs.hasOwnProperty(original)) breaking(original, replacement, _this);\n    });\n  },\n  methods: {\n    click: function click(e) {\n      this.$emit('click', e);\n      this.chipGroup && this.toggle();\n    },\n    genFilter: function genFilter() {\n      var children = [];\n      if (this.isActive) {\n        children.push(this.$createElement(VIcon, {\n          staticClass: 'v-chip__filter',\n          props: {\n            left: true\n          }\n        }, this.filterIcon));\n      }\n      return this.$createElement(VExpandXTransition, children);\n    },\n    genClose: function genClose() {\n      var _this2 = this;\n      return this.$createElement(VIcon, {\n        staticClass: 'v-chip__close',\n        props: {\n          right: true,\n          size: 18\n        },\n        attrs: {\n          'aria-label': this.$vuetify.lang.t(this.closeLabel)\n        },\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            _this2.$emit('click:close');\n            _this2.$emit('update:active', false);\n          }\n        }\n      }, this.closeIcon);\n    },\n    genContent: function genContent() {\n      return this.$createElement('span', {\n        staticClass: 'v-chip__content'\n      }, [this.filter && this.genFilter(), this.$slots[\"default\"], this.hasClose && this.genClose()]);\n    }\n  },\n  render: function render(h) {\n    var children = [this.genContent()];\n    var _this$generateRouteLi = this.generateRouteLink(),\n      tag = _this$generateRouteLi.tag,\n      data = _this$generateRouteLi.data;\n    data.attrs = _objectSpread(_objectSpread({}, data.attrs), {}, {\n      draggable: this.draggable ? 'true' : undefined,\n      tabindex: this.chipGroup && !this.disabled ? 0 : data.attrs.tabindex\n    });\n    data.directives.push({\n      name: 'show',\n      value: this.active\n    });\n    data = this.setBackgroundColor(this.color, data);\n    var color = this.textColor || this.outlined && this.color;\n    return h(tag, this.setTextColor(color, data), children);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}