{"ast":null,"code":"import _classCallCheck from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/web.timers.js\";\n// Extensions\nimport { Service } from '../service';\nexport var Breakpoint = /*#__PURE__*/function (_Service) {\n  function Breakpoint(preset) {\n    var _this;\n    _classCallCheck(this, Breakpoint);\n    _this = _callSuper(this, Breakpoint); // Public\n\n    _this.xs = false;\n    _this.sm = false;\n    _this.md = false;\n    _this.lg = false;\n    _this.xl = false;\n    _this.xsOnly = false;\n    _this.smOnly = false;\n    _this.smAndDown = false;\n    _this.smAndUp = false;\n    _this.mdOnly = false;\n    _this.mdAndDown = false;\n    _this.mdAndUp = false;\n    _this.lgOnly = false;\n    _this.lgAndDown = false;\n    _this.lgAndUp = false;\n    _this.xlOnly = false; // Value is xs to match v2.x functionality\n\n    _this.name = 'xs';\n    _this.height = 0;\n    _this.width = 0; // TODO: Add functionality to detect this dynamically in v3\n    // Value is true to match v2.x functionality\n\n    _this.mobile = true;\n    _this.resizeTimeout = 0;\n    var _preset$Breakpoint$pr = preset[Breakpoint.property],\n      mobileBreakpoint = _preset$Breakpoint$pr.mobileBreakpoint,\n      scrollBarWidth = _preset$Breakpoint$pr.scrollBarWidth,\n      thresholds = _preset$Breakpoint$pr.thresholds;\n    _this.mobileBreakpoint = mobileBreakpoint;\n    _this.scrollBarWidth = scrollBarWidth;\n    _this.thresholds = thresholds;\n    return _this;\n  }\n  _inherits(Breakpoint, _Service);\n  return _createClass(Breakpoint, [{\n    key: \"init\",\n    value: function init() {\n      this.update();\n      /* istanbul ignore if */\n\n      if (typeof window === 'undefined') return;\n      window.addEventListener('resize', this.onResize.bind(this), {\n        passive: true\n      });\n    }\n    /* eslint-disable-next-line max-statements */\n  }, {\n    key: \"update\",\n    value: function update() {\n      var ssr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var height = ssr ? 0 : this.getClientHeight();\n      var width = ssr ? 0 : this.getClientWidth();\n      var xs = width < this.thresholds.xs;\n      var sm = width < this.thresholds.sm && !xs;\n      var md = width < this.thresholds.md - this.scrollBarWidth && !(sm || xs);\n      var lg = width < this.thresholds.lg - this.scrollBarWidth && !(md || sm || xs);\n      var xl = width >= this.thresholds.lg - this.scrollBarWidth;\n      this.height = height;\n      this.width = width;\n      this.xs = xs;\n      this.sm = sm;\n      this.md = md;\n      this.lg = lg;\n      this.xl = xl;\n      this.xsOnly = xs;\n      this.smOnly = sm;\n      this.smAndDown = (xs || sm) && !(md || lg || xl);\n      this.smAndUp = !xs && (sm || md || lg || xl);\n      this.mdOnly = md;\n      this.mdAndDown = (xs || sm || md) && !(lg || xl);\n      this.mdAndUp = !(xs || sm) && (md || lg || xl);\n      this.lgOnly = lg;\n      this.lgAndDown = (xs || sm || md || lg) && !xl;\n      this.lgAndUp = !(xs || sm || md) && (lg || xl);\n      this.xlOnly = xl;\n      switch (true) {\n        case xs:\n          this.name = 'xs';\n          break;\n        case sm:\n          this.name = 'sm';\n          break;\n        case md:\n          this.name = 'md';\n          break;\n        case lg:\n          this.name = 'lg';\n          break;\n        default:\n          this.name = 'xl';\n          break;\n      }\n      if (typeof this.mobileBreakpoint === 'number') {\n        this.mobile = width < parseInt(this.mobileBreakpoint, 10);\n        return;\n      }\n      var breakpoints = {\n        xs: 0,\n        sm: 1,\n        md: 2,\n        lg: 3,\n        xl: 4\n      };\n      var current = breakpoints[this.name];\n      var max = breakpoints[this.mobileBreakpoint];\n      this.mobile = current <= max;\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize() {\n      clearTimeout(this.resizeTimeout); // Added debounce to match what\n      // v-resize used to do but was\n      // removed due to a memory leak\n      // https://github.com/vuetifyjs/vuetify/pull/2997\n\n      this.resizeTimeout = window.setTimeout(this.update.bind(this), 200);\n    } // Cross-browser support as described in:\n    // https://stackoverflow.com/questions/1248081\n  }, {\n    key: \"getClientWidth\",\n    value: function getClientWidth() {\n      /* istanbul ignore if */\n      if (typeof document === 'undefined') return 0; // SSR\n\n      return Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n  }, {\n    key: \"getClientHeight\",\n    value: function getClientHeight() {\n      /* istanbul ignore if */\n      if (typeof document === 'undefined') return 0; // SSR\n\n      return Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    }\n  }]);\n}(Service);\nBreakpoint.property = 'breakpoint';","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}