{"ast":null,"code":"import \"C:\\\\Users\\\\Admin\\\\Desktop\\\\pomoika vape lab\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.array.iterator.js\";\nimport \"C:\\\\Users\\\\Admin\\\\Desktop\\\\pomoika vape lab\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.js\";\nimport \"C:\\\\Users\\\\Admin\\\\Desktop\\\\pomoika vape lab\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.object.assign.js\";\nimport \"C:\\\\Users\\\\Admin\\\\Desktop\\\\pomoika vape lab\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.finally.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport vuetify from './plugins/vuetify';\nimport axios from 'axios';\nimport Toast from 'vue-toastification';\nimport 'vuetify/dist/vuetify.min.css';\nimport 'vue-toastification/dist/index.css';\nVue.config.productionTip = false;\n\n// Настройка axios\nvar isProduction = process.env.NODE_ENV === 'production';\nvar envApiBase = process.env.VUE_APP_API_BASE_URL;\n// В продакшене используем URL хостинга, в деве — localhost:8000\nvar defaultProdBase = 'https://bot-pomoika.onrender.com/'; // ЗАМЕНИТЕ НА ВАШ ДОМЕН\nvar defaultDevBase = 'http://localhost:8000';\naxios.defaults.baseURL = envApiBase || (isProduction ? defaultProdBase : defaultDevBase);\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n// Настройка toast уведомлений\nVue.use(Toast, {\n  position: 'top-right',\n  timeout: 3000,\n  closeOnClick: true,\n  pauseOnFocusLoss: true,\n  pauseOnHover: true,\n  draggable: true,\n  draggablePercent: 0.6,\n  showCloseButtonOnHover: false,\n  hideProgressBar: false,\n  closeButton: 'button',\n  icon: true,\n  rtl: false\n});\n\n// Добавляем глобальный метод для toast\nVue.prototype.$toast = Vue.$toast;\n\n// Interceptor для проверки авторизации\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response && error.response.status === 401) {\n    // Если получили 401, очищаем данные авторизации и перенаправляем на логин\n    localStorage.removeItem('admin_user');\n    localStorage.removeItem('is_admin');\n    localStorage.removeItem('admin_token');\n    if (window.location.hash.includes('/admin')) {\n      window.location.href = '/#/admin/login';\n    }\n  }\n  return Promise.reject(error);\n});\nnew Vue({\n  router: router,\n  vuetify: vuetify,\n  render: function render(h) {\n    return h(App);\n  }\n}).$mount('#app');","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}