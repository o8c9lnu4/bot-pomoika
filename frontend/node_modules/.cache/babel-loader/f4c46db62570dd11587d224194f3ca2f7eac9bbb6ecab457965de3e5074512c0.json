{"ast":null,"code":"import _typeof from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport { isLeapYear } from '../../../util/dateTimeUtils';\nexport var PARSE_REGEX = /^(\\d{4})-(\\d{1,2})(-(\\d{1,2}))?([^\\d]+(\\d{1,2}))?(:(\\d{1,2}))?(:(\\d{1,2}))?$/;\nexport var PARSE_TIME = /(\\d\\d?)(:(\\d\\d?)|)(:(\\d\\d?)|)/;\nexport var DAYS_IN_MONTH = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nexport var DAYS_IN_MONTH_LEAP = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nexport var DAYS_IN_MONTH_MIN = 28;\nexport var DAYS_IN_MONTH_MAX = 31;\nexport var MONTH_MAX = 12;\nexport var MONTH_MIN = 1;\nexport var DAY_MIN = 1;\nexport var DAYS_IN_WEEK = 7;\nexport var MINUTES_IN_HOUR = 60;\nexport var MINUTE_MAX = 59;\nexport var MINUTES_IN_DAY = 24 * 60;\nexport var HOURS_IN_DAY = 24;\nexport var HOUR_MAX = 23;\nexport var FIRST_HOUR = 0;\nexport var OFFSET_YEAR = 10000;\nexport var OFFSET_MONTH = 100;\nexport var OFFSET_HOUR = 100;\nexport var OFFSET_TIME = 10000;\nexport function getStartOfWeek(timestamp, weekdays, today) {\n  var start = copyTimestamp(timestamp);\n  findWeekday(start, weekdays[0], prevDay);\n  updateFormatted(start);\n  if (today) {\n    updateRelative(start, today, start.hasTime);\n  }\n  return start;\n}\nexport function getEndOfWeek(timestamp, weekdays, today) {\n  var end = copyTimestamp(timestamp);\n  findWeekday(end, weekdays[weekdays.length - 1]);\n  updateFormatted(end);\n  if (today) {\n    updateRelative(end, today, end.hasTime);\n  }\n  return end;\n}\nexport function getStartOfMonth(timestamp) {\n  var start = copyTimestamp(timestamp);\n  start.day = DAY_MIN;\n  updateWeekday(start);\n  updateFormatted(start);\n  return start;\n}\nexport function getEndOfMonth(timestamp) {\n  var end = copyTimestamp(timestamp);\n  end.day = daysInMonth(end.year, end.month);\n  updateWeekday(end);\n  updateFormatted(end);\n  return end;\n}\nexport function validateTime(input) {\n  return typeof input === 'number' && isFinite(input) || !!PARSE_TIME.exec(input) || _typeof(input) === 'object' && isFinite(input.hour) && isFinite(input.minute);\n}\nexport function parseTime(input) {\n  if (typeof input === 'number') {\n    // when a number is given, it's minutes since 12:00am\n    return input;\n  } else if (typeof input === 'string') {\n    // when a string is given, it's a hh:mm:ss format where seconds are optional\n    var parts = PARSE_TIME.exec(input);\n    if (!parts) {\n      return false;\n    }\n    return parseInt(parts[1]) * 60 + parseInt(parts[3] || 0);\n  } else if (_typeof(input) === 'object') {\n    // when an object is given, it must have hour and minute\n    if (typeof input.hour !== 'number' || typeof input.minute !== 'number') {\n      return false;\n    }\n    return input.hour * 60 + input.minute;\n  } else {\n    // unsupported type\n    return false;\n  }\n}\nexport function validateTimestamp(input) {\n  return typeof input === 'number' && isFinite(input) || typeof input === 'string' && !!PARSE_REGEX.exec(input) || input instanceof Date;\n}\nexport function parseTimestamp(input) {\n  var required = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var now = arguments.length > 2 ? arguments[2] : undefined;\n  if (typeof input === 'number' && isFinite(input)) {\n    input = new Date(input);\n  }\n  if (input instanceof Date) {\n    var date = parseDate(input);\n    if (now) {\n      updateRelative(date, now, date.hasTime);\n    }\n    return date;\n  }\n  if (typeof input !== 'string') {\n    if (required) {\n      throw new Error(\"\".concat(input, \" is not a valid timestamp. It must be a Date, number of milliseconds since Epoch, or a string in the format of YYYY-MM-DD or YYYY-MM-DD hh:mm. Zero-padding is optional and seconds are ignored.\"));\n    }\n    return null;\n  } // YYYY-MM-DD hh:mm:ss\n\n  var parts = PARSE_REGEX.exec(input);\n  if (!parts) {\n    if (required) {\n      throw new Error(\"\".concat(input, \" is not a valid timestamp. It must be a Date, number of milliseconds since Epoch, or a string in the format of YYYY-MM-DD or YYYY-MM-DD hh:mm. Zero-padding is optional and seconds are ignored.\"));\n    }\n    return null;\n  }\n  var timestamp = {\n    date: input,\n    time: '',\n    year: parseInt(parts[1]),\n    month: parseInt(parts[2]),\n    day: parseInt(parts[4]) || 1,\n    hour: parseInt(parts[6]) || 0,\n    minute: parseInt(parts[8]) || 0,\n    weekday: 0,\n    hasDay: !!parts[4],\n    hasTime: !!(parts[6] && parts[8]),\n    past: false,\n    present: false,\n    future: false\n  };\n  updateWeekday(timestamp);\n  updateFormatted(timestamp);\n  if (now) {\n    updateRelative(timestamp, now, timestamp.hasTime);\n  }\n  return timestamp;\n}\nexport function parseDate(date) {\n  return updateFormatted({\n    date: '',\n    time: '',\n    year: date.getFullYear(),\n    month: date.getMonth() + 1,\n    day: date.getDate(),\n    weekday: date.getDay(),\n    hour: date.getHours(),\n    minute: date.getMinutes(),\n    hasDay: true,\n    hasTime: true,\n    past: false,\n    present: true,\n    future: false\n  });\n}\nexport function getDayIdentifier(timestamp) {\n  return timestamp.year * OFFSET_YEAR + timestamp.month * OFFSET_MONTH + timestamp.day;\n}\nexport function getTimeIdentifier(timestamp) {\n  return timestamp.hour * OFFSET_HOUR + timestamp.minute;\n}\nexport function getTimestampIdentifier(timestamp) {\n  return getDayIdentifier(timestamp) * OFFSET_TIME + getTimeIdentifier(timestamp);\n}\nexport function updateRelative(timestamp, now) {\n  var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var a = getDayIdentifier(now);\n  var b = getDayIdentifier(timestamp);\n  var present = a === b;\n  if (timestamp.hasTime && time && present) {\n    a = getTimeIdentifier(now);\n    b = getTimeIdentifier(timestamp);\n    present = a === b;\n  }\n  timestamp.past = b < a;\n  timestamp.present = present;\n  timestamp.future = b > a;\n  return timestamp;\n}\nexport function isTimedless(input) {\n  return input instanceof Date || typeof input === 'number' && isFinite(input);\n}\nexport function updateHasTime(timestamp, hasTime, now) {\n  if (timestamp.hasTime !== hasTime) {\n    timestamp.hasTime = hasTime;\n    if (!hasTime) {\n      timestamp.hour = HOUR_MAX;\n      timestamp.minute = MINUTE_MAX;\n      timestamp.time = getTime(timestamp);\n    }\n    if (now) {\n      updateRelative(timestamp, now, timestamp.hasTime);\n    }\n  }\n  return timestamp;\n}\nexport function updateMinutes(timestamp, minutes, now) {\n  timestamp.hasTime = true;\n  timestamp.hour = Math.floor(minutes / MINUTES_IN_HOUR);\n  timestamp.minute = minutes % MINUTES_IN_HOUR;\n  timestamp.time = getTime(timestamp);\n  if (now) {\n    updateRelative(timestamp, now, true);\n  }\n  return timestamp;\n}\nexport function updateWeekday(timestamp) {\n  timestamp.weekday = getWeekday(timestamp);\n  return timestamp;\n}\nexport function updateFormatted(timestamp) {\n  timestamp.time = getTime(timestamp);\n  timestamp.date = getDate(timestamp);\n  return timestamp;\n}\nexport function getWeekday(timestamp) {\n  if (timestamp.hasDay) {\n    var _ = Math.floor;\n    var k = timestamp.day;\n    var m = (timestamp.month + 9) % MONTH_MAX + 1;\n    var C = _(timestamp.year / 100);\n    var Y = timestamp.year % 100 - (timestamp.month <= 2 ? 1 : 0);\n    return ((k + _(2.6 * m - 0.2) - 2 * C + Y + _(Y / 4) + _(C / 4)) % 7 + 7) % 7;\n  }\n  return timestamp.weekday;\n}\nexport function daysInMonth(year, month) {\n  return isLeapYear(year) ? DAYS_IN_MONTH_LEAP[month] : DAYS_IN_MONTH[month];\n}\nexport function copyTimestamp(timestamp) {\n  var date = timestamp.date,\n    time = timestamp.time,\n    year = timestamp.year,\n    month = timestamp.month,\n    day = timestamp.day,\n    weekday = timestamp.weekday,\n    hour = timestamp.hour,\n    minute = timestamp.minute,\n    hasDay = timestamp.hasDay,\n    hasTime = timestamp.hasTime,\n    past = timestamp.past,\n    present = timestamp.present,\n    future = timestamp.future;\n  return {\n    date: date,\n    time: time,\n    year: year,\n    month: month,\n    day: day,\n    weekday: weekday,\n    hour: hour,\n    minute: minute,\n    hasDay: hasDay,\n    hasTime: hasTime,\n    past: past,\n    present: present,\n    future: future\n  };\n}\nexport function padNumber(x, length) {\n  var padded = String(x);\n  while (padded.length < length) {\n    padded = '0' + padded;\n  }\n  return padded;\n}\nexport function getDate(timestamp) {\n  var str = \"\".concat(padNumber(timestamp.year, 4), \"-\").concat(padNumber(timestamp.month, 2));\n  if (timestamp.hasDay) str += \"-\".concat(padNumber(timestamp.day, 2));\n  return str;\n}\nexport function getTime(timestamp) {\n  if (!timestamp.hasTime) {\n    return '';\n  }\n  return \"\".concat(padNumber(timestamp.hour, 2), \":\").concat(padNumber(timestamp.minute, 2));\n}\nexport function nextMinutes(timestamp, minutes) {\n  timestamp.minute += minutes;\n  while (timestamp.minute > MINUTES_IN_HOUR) {\n    timestamp.minute -= MINUTES_IN_HOUR;\n    timestamp.hour++;\n    if (timestamp.hour >= HOURS_IN_DAY) {\n      nextDay(timestamp);\n      timestamp.hour = FIRST_HOUR;\n    }\n  }\n  return timestamp;\n}\nexport function nextDay(timestamp) {\n  timestamp.day++;\n  timestamp.weekday = (timestamp.weekday + 1) % DAYS_IN_WEEK;\n  if (timestamp.day > DAYS_IN_MONTH_MIN && timestamp.day > daysInMonth(timestamp.year, timestamp.month)) {\n    timestamp.day = DAY_MIN;\n    timestamp.month++;\n    if (timestamp.month > MONTH_MAX) {\n      timestamp.month = MONTH_MIN;\n      timestamp.year++;\n    }\n  }\n  return timestamp;\n}\nexport function prevDay(timestamp) {\n  timestamp.day--;\n  timestamp.weekday = (timestamp.weekday + 6) % DAYS_IN_WEEK;\n  if (timestamp.day < DAY_MIN) {\n    timestamp.month--;\n    if (timestamp.month < MONTH_MIN) {\n      timestamp.year--;\n      timestamp.month = MONTH_MAX;\n    }\n    timestamp.day = daysInMonth(timestamp.year, timestamp.month);\n  }\n  return timestamp;\n}\nexport function relativeDays(timestamp) {\n  var mover = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : nextDay;\n  var days = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  while (--days >= 0) mover(timestamp);\n  return timestamp;\n}\nexport function diffMinutes(min, max) {\n  var Y = (max.year - min.year) * 525600;\n  var M = (max.month - min.month) * 43800;\n  var D = (max.day - min.day) * 1440;\n  var h = (max.hour - min.hour) * 60;\n  var m = max.minute - min.minute;\n  return Y + M + D + h + m;\n}\nexport function findWeekday(timestamp, weekday) {\n  var mover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : nextDay;\n  var maxDays = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 6;\n  while (timestamp.weekday !== weekday && --maxDays >= 0) mover(timestamp);\n  return timestamp;\n}\nexport function getWeekdaySkips(weekdays) {\n  var skips = [1, 1, 1, 1, 1, 1, 1];\n  var filled = [0, 0, 0, 0, 0, 0, 0];\n  for (var i = 0; i < weekdays.length; i++) {\n    filled[weekdays[i]] = 1;\n  }\n  for (var k = 0; k < DAYS_IN_WEEK; k++) {\n    var skip = 1;\n    for (var j = 1; j < DAYS_IN_WEEK; j++) {\n      var next = (k + j) % DAYS_IN_WEEK;\n      if (filled[next]) {\n        break;\n      }\n      skip++;\n    }\n    skips[k] = filled[k] * skip;\n  }\n  return skips;\n}\nexport function timestampToDate(timestamp) {\n  var time = \"\".concat(padNumber(timestamp.hour, 2), \":\").concat(padNumber(timestamp.minute, 2));\n  var date = timestamp.date;\n  return new Date(\"\".concat(date, \"T\").concat(time, \":00+00:00\"));\n}\nexport function createDayList(start, end, now, weekdaySkips) {\n  var max = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 42;\n  var min = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var stop = getDayIdentifier(end);\n  var days = [];\n  var current = copyTimestamp(start);\n  var currentIdentifier = 0;\n  var stopped = currentIdentifier === stop;\n  if (stop < getDayIdentifier(start)) {\n    throw new Error('End date is earlier than start date.');\n  }\n  while ((!stopped || days.length < min) && days.length < max) {\n    currentIdentifier = getDayIdentifier(current);\n    stopped = stopped || currentIdentifier === stop;\n    if (weekdaySkips[current.weekday] === 0) {\n      current = nextDay(current);\n      continue;\n    }\n    var day = copyTimestamp(current);\n    updateFormatted(day);\n    updateRelative(day, now);\n    days.push(day);\n    current = relativeDays(current, nextDay, weekdaySkips[current.weekday]);\n  }\n  if (!days.length) throw new Error('No dates found using specified start date, end date, and weekdays.');\n  return days;\n}\nexport function createIntervalList(timestamp, first, minutes, count, now) {\n  var intervals = [];\n  for (var i = 0; i < count; i++) {\n    var mins = first + i * minutes;\n    var _int = copyTimestamp(timestamp);\n    intervals.push(updateMinutes(_int, mins, now));\n  }\n  return intervals;\n}\nexport function createNativeLocaleFormatter(locale, getOptions) {\n  var emptyFormatter = function emptyFormatter(_t, _s) {\n    return '';\n  };\n  if (typeof Intl === 'undefined' || typeof Intl.DateTimeFormat === 'undefined') {\n    return emptyFormatter;\n  }\n  return function (timestamp, _short) {\n    try {\n      var intlFormatter = new Intl.DateTimeFormat(locale || undefined, getOptions(timestamp, _short));\n      return intlFormatter.format(timestampToDate(timestamp));\n    } catch (e) {\n      return '';\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}