{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"../../../src/components/VGrid/VGrid.sass\";\nimport Vue from 'vue';\nimport mergeData from '../../util/mergeData';\nimport { upperFirst } from '../../util/helpers'; // no xs\n\nvar breakpoints = ['sm', 'md', 'lg', 'xl'];\nvar breakpointProps = function () {\n  return breakpoints.reduce(function (props, val) {\n    props[val] = {\n      type: [Boolean, String, Number],\n      \"default\": false\n    };\n    return props;\n  }, {});\n}();\nvar offsetProps = function () {\n  return breakpoints.reduce(function (props, val) {\n    props['offset' + upperFirst(val)] = {\n      type: [String, Number],\n      \"default\": null\n    };\n    return props;\n  }, {});\n}();\nvar orderProps = function () {\n  return breakpoints.reduce(function (props, val) {\n    props['order' + upperFirst(val)] = {\n      type: [String, Number],\n      \"default\": null\n    };\n    return props;\n  }, {});\n}();\nvar propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps)\n};\nfunction breakpointClass(type, prop, val) {\n  var className = type;\n  if (val == null || val === false) {\n    return undefined;\n  }\n  if (prop) {\n    var breakpoint = prop.replace(type, '');\n    className += \"-\".concat(breakpoint);\n  } // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase();\n  } // .order-md-6\n\n  className += \"-\".concat(val);\n  return className.toLowerCase();\n}\nvar cache = new Map();\nexport default Vue.extend({\n  name: 'v-col',\n  functional: true,\n  props: _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    cols: {\n      type: [Boolean, String, Number],\n      \"default\": false\n    }\n  }, breakpointProps), {}, {\n    offset: {\n      type: [String, Number],\n      \"default\": null\n    }\n  }, offsetProps), {}, {\n    order: {\n      type: [String, Number],\n      \"default\": null\n    }\n  }, orderProps), {}, {\n    alignSelf: {\n      type: String,\n      \"default\": null,\n      validator: function validator(str) {\n        return ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str);\n      }\n    },\n    tag: {\n      type: String,\n      \"default\": 'div'\n    }\n  }),\n  render: function render(h, _ref) {\n    var props = _ref.props,\n      data = _ref.data,\n      children = _ref.children,\n      parent = _ref.parent;\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    var cacheKey = '';\n    for (var prop in props) {\n      cacheKey += String(props[prop]);\n    }\n    var classList = cache.get(cacheKey);\n    if (!classList) {\n      classList = []; // Loop through `col`, `offset`, `order` breakpoint props\n\n      var type;\n      for (type in propMap) {\n        propMap[type].forEach(function (prop) {\n          var value = props[prop];\n          var className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n      var hasColClasses = classList.some(function (className) {\n        return className.startsWith('col-');\n      });\n      classList.push(_defineProperty(_defineProperty(_defineProperty(_defineProperty({\n        // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n        col: !hasColClasses || !props.cols\n      }, \"col-\".concat(props.cols), props.cols), \"offset-\".concat(props.offset), props.offset), \"order-\".concat(props.order), props.order), \"align-self-\".concat(props.alignSelf), props.alignSelf));\n      cache.set(cacheKey, classList);\n    }\n    return h(props.tag, mergeData(data, {\n      \"class\": classList\n    }), children);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}