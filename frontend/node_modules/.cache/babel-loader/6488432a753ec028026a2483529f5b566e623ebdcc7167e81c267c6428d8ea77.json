{"ast":null,"code":"import _defineProperty from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.substr.js\";\n// Styles\nimport \"../../../src/components/VColorPicker/VColorPickerEdit.sass\"; // Components\n\nimport VBtn from '../VBtn';\nimport VIcon from '../VIcon'; // Helpers\n\nimport { parseHex } from '../../util/colorUtils'; // Types\n\nimport Vue from 'vue';\nimport { fromRGBA, fromHexa, fromHSLA } from './util';\nexport var modes = {\n  rgba: {\n    inputs: [['r', 255, 'int'], ['g', 255, 'int'], ['b', 255, 'int'], ['a', 1, 'float']],\n    from: fromRGBA\n  },\n  hsla: {\n    inputs: [['h', 360, 'int'], ['s', 1, 'float'], ['l', 1, 'float'], ['a', 1, 'float']],\n    from: fromHSLA\n  },\n  hexa: {\n    from: fromHexa\n  }\n};\nexport default Vue.extend({\n  name: 'v-color-picker-edit',\n  props: {\n    color: Object,\n    disabled: Boolean,\n    hideAlpha: Boolean,\n    hideModeSwitch: Boolean,\n    mode: {\n      type: String,\n      \"default\": 'rgba',\n      validator: function validator(v) {\n        return Object.keys(modes).includes(v);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      modes: modes,\n      internalMode: this.mode\n    };\n  },\n  computed: {\n    currentMode: function currentMode() {\n      return this.modes[this.internalMode];\n    }\n  },\n  watch: {\n    mode: function mode(_mode) {\n      this.internalMode = _mode;\n    }\n  },\n  created: function created() {\n    this.internalMode = this.mode;\n  },\n  methods: {\n    getValue: function getValue(v, type) {\n      if (type === 'float') return Math.round(v * 100) / 100;else if (type === 'int') return Math.round(v);else return 0;\n    },\n    parseValue: function parseValue(v, type) {\n      if (type === 'float') return parseFloat(v);else if (type === 'int') return parseInt(v, 10) || 0;else return 0;\n    },\n    changeMode: function changeMode() {\n      var modes = Object.keys(this.modes);\n      var index = modes.indexOf(this.internalMode);\n      var newMode = modes[(index + 1) % modes.length];\n      this.internalMode = newMode;\n      this.$emit('update:mode', newMode);\n    },\n    genInput: function genInput(target, attrs, value, on) {\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__input'\n      }, [this.$createElement('input', {\n        key: target,\n        attrs: attrs,\n        domProps: {\n          value: value\n        },\n        on: on\n      }), this.$createElement('span', target.toUpperCase())]);\n    },\n    genInputs: function genInputs() {\n      var _this = this;\n      if (this.internalMode === 'hexa') {\n        var hex = this.color.hexa;\n        var value = this.hideAlpha && hex.endsWith('FF') ? hex.substr(0, 7) : hex;\n        return this.genInput('hex', {\n          maxlength: this.hideAlpha ? 7 : 9,\n          disabled: this.disabled\n        }, value, {\n          change: function change(e) {\n            var el = e.target;\n            _this.$emit('update:color', _this.currentMode.from(parseHex(el.value)));\n          }\n        });\n      } else {\n        var inputs = this.hideAlpha ? this.currentMode.inputs.slice(0, -1) : this.currentMode.inputs;\n        return inputs.map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 3),\n            target = _ref2[0],\n            max = _ref2[1],\n            type = _ref2[2];\n          var value = _this.color[_this.internalMode];\n          return _this.genInput(target, {\n            type: 'number',\n            min: 0,\n            max: max,\n            step: type === 'float' ? '0.01' : type === 'int' ? '1' : undefined,\n            disabled: _this.disabled\n          }, _this.getValue(value[target], type), {\n            input: function input(e) {\n              var el = e.target;\n              var newVal = _this.parseValue(el.value || '0', type);\n              _this.$emit('update:color', _this.currentMode.from(Object.assign({}, value, _defineProperty({}, target, newVal)), _this.color.alpha));\n            }\n          });\n        });\n      }\n    },\n    genSwitch: function genSwitch() {\n      return this.$createElement(VBtn, {\n        props: {\n          small: true,\n          icon: true,\n          disabled: this.disabled\n        },\n        on: {\n          click: this.changeMode\n        }\n      }, [this.$createElement(VIcon, '$unfold')]);\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      staticClass: 'v-color-picker__edit'\n    }, [this.genInputs(), !this.hideModeSwitch && this.genSwitch()]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}