{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\n// Styles\nimport \"../../../src/components/VVirtualScroll/VVirtualScroll.sass\"; // Mixins\n\nimport Measurable from '../../mixins/measurable'; // Directives\n\nimport Scroll from '../../directives/scroll'; // Utilities\n\nimport { convertToUnit, getSlot } from '../../util/helpers';\nexport default Measurable.extend({\n  name: 'v-virtual-scroll',\n  directives: {\n    Scroll: Scroll\n  },\n  props: {\n    bench: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    itemHeight: {\n      type: [Number, String],\n      required: true\n    },\n    items: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      first: 0,\n      last: 0,\n      scrollTop: 0\n    };\n  },\n  computed: {\n    __bench: function __bench() {\n      return parseInt(this.bench, 10);\n    },\n    __itemHeight: function __itemHeight() {\n      return parseInt(this.itemHeight, 10);\n    },\n    firstToRender: function firstToRender() {\n      return Math.max(0, this.first - this.__bench);\n    },\n    lastToRender: function lastToRender() {\n      return Math.min(this.items.length, this.last + this.__bench);\n    }\n  },\n  watch: {\n    height: 'onScroll',\n    itemHeight: 'onScroll'\n  },\n  mounted: function mounted() {\n    this.last = this.getLast(0);\n  },\n  methods: {\n    getChildren: function getChildren() {\n      return this.items.slice(this.firstToRender, this.lastToRender).map(this.genChild);\n    },\n    genChild: function genChild(item, index) {\n      index += this.firstToRender;\n      var top = convertToUnit(index * this.__itemHeight);\n      return this.$createElement('div', {\n        staticClass: 'v-virtual-scroll__item',\n        style: {\n          top: top\n        },\n        key: index\n      }, getSlot(this, 'default', {\n        index: index,\n        item: item\n      }));\n    },\n    getFirst: function getFirst() {\n      return Math.floor(this.scrollTop / this.__itemHeight);\n    },\n    getLast: function getLast(first) {\n      var height = parseInt(this.height || 0, 10) || this.$el.clientHeight;\n      return first + Math.ceil(height / this.__itemHeight);\n    },\n    onScroll: function onScroll() {\n      this.scrollTop = this.$el.scrollTop;\n      this.first = this.getFirst();\n      this.last = this.getLast(this.first);\n    }\n  },\n  render: function render(h) {\n    var content = h('div', {\n      staticClass: 'v-virtual-scroll__container',\n      style: {\n        height: convertToUnit(this.items.length * this.__itemHeight)\n      }\n    }, this.getChildren());\n    return h('div', {\n      staticClass: 'v-virtual-scroll',\n      style: this.measurableStyles,\n      directives: [{\n        name: 'scroll',\n        modifiers: {\n          self: true\n        },\n        value: this.onScroll\n      }],\n      on: this.$listeners\n    }, [content]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}