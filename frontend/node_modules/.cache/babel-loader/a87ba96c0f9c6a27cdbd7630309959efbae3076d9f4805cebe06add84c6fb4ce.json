{"ast":null,"code":"import _objectSpread from \"C:/Users/Admin/Desktop/pomoika vape lab/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/web.timers.js\";\n// Styles\nimport \"../../../src/components/VCarousel/VCarousel.sass\"; // Extensions\n\nimport VWindow from '../VWindow/VWindow'; // Components\n\nimport VBtn from '../VBtn';\nimport VIcon from '../VIcon';\nimport VProgressLinear from '../VProgressLinear'; // Mixins\n// TODO: Move this into core components v2.0\n\nimport ButtonGroup from '../../mixins/button-group'; // Utilities\n\nimport { convertToUnit } from '../../util/helpers';\nimport { breaking } from '../../util/console';\nexport default VWindow.extend({\n  name: 'v-carousel',\n  props: {\n    continuous: {\n      type: Boolean,\n      \"default\": true\n    },\n    cycle: Boolean,\n    delimiterIcon: {\n      type: String,\n      \"default\": '$delimiter'\n    },\n    height: {\n      type: [Number, String],\n      \"default\": 500\n    },\n    hideDelimiters: Boolean,\n    hideDelimiterBackground: Boolean,\n    interval: {\n      type: [Number, String],\n      \"default\": 6000,\n      validator: function validator(value) {\n        return value > 0;\n      }\n    },\n    mandatory: {\n      type: Boolean,\n      \"default\": true\n    },\n    progress: Boolean,\n    progressColor: String,\n    showArrows: {\n      type: Boolean,\n      \"default\": true\n    },\n    verticalDelimiters: {\n      type: String,\n      \"default\": undefined\n    }\n  },\n  // pass down the parent's theme\n  provide: function provide() {\n    return {\n      parentTheme: this.theme\n    };\n  },\n  data: function data() {\n    return {\n      internalHeight: this.height,\n      slideTimeout: undefined\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread({}, VWindow.options.computed.classes.call(this)), {}, {\n        'v-carousel': true,\n        'v-carousel--hide-delimiter-background': this.hideDelimiterBackground,\n        'v-carousel--vertical-delimiters': this.isVertical\n      });\n    },\n    isDark: function isDark() {\n      return this.dark || !this.light;\n    },\n    isVertical: function isVertical() {\n      return this.verticalDelimiters != null;\n    }\n  },\n  watch: {\n    internalValue: 'restartTimeout',\n    interval: 'restartTimeout',\n    height: function height(val, oldVal) {\n      if (val === oldVal || !val) return;\n      this.internalHeight = val;\n    },\n    cycle: function cycle(val) {\n      if (val) {\n        this.restartTimeout();\n      } else {\n        clearTimeout(this.slideTimeout);\n        this.slideTimeout = undefined;\n      }\n    }\n  },\n  created: function created() {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('hide-controls')) {\n      breaking('hide-controls', ':show-arrows=\"false\"', this);\n    }\n  },\n  mounted: function mounted() {\n    this.startTimeout();\n  },\n  methods: {\n    genControlIcons: function genControlIcons() {\n      if (this.isVertical) return null;\n      return VWindow.options.methods.genControlIcons.call(this);\n    },\n    genDelimiters: function genDelimiters() {\n      return this.$createElement('div', {\n        staticClass: 'v-carousel__controls',\n        style: {\n          left: this.verticalDelimiters === 'left' && this.isVertical ? 0 : 'auto',\n          right: this.verticalDelimiters === 'right' ? 0 : 'auto'\n        }\n      }, [this.genItems()]);\n    },\n    genItems: function genItems() {\n      var _this = this;\n      var length = this.items.length;\n      var children = [];\n      for (var i = 0; i < length; i++) {\n        var child = this.$createElement(VBtn, {\n          staticClass: 'v-carousel__controls__item',\n          attrs: {\n            'aria-label': this.$vuetify.lang.t('$vuetify.carousel.ariaLabel.delimiter', i + 1, length)\n          },\n          props: {\n            icon: true,\n            small: true,\n            value: this.getValue(this.items[i], i)\n          },\n          key: i\n        }, [this.$createElement(VIcon, {\n          props: {\n            size: 18\n          }\n        }, this.delimiterIcon)]);\n        children.push(child);\n      }\n      return this.$createElement(ButtonGroup, {\n        props: {\n          value: this.internalValue,\n          mandatory: this.mandatory\n        },\n        on: {\n          change: function change(val) {\n            _this.internalValue = val;\n          }\n        }\n      }, children);\n    },\n    genProgress: function genProgress() {\n      return this.$createElement(VProgressLinear, {\n        staticClass: 'v-carousel__progress',\n        props: {\n          color: this.progressColor,\n          value: (this.internalIndex + 1) / this.items.length * 100\n        }\n      });\n    },\n    restartTimeout: function restartTimeout() {\n      this.slideTimeout && clearTimeout(this.slideTimeout);\n      this.slideTimeout = undefined;\n      window.requestAnimationFrame(this.startTimeout);\n    },\n    startTimeout: function startTimeout() {\n      if (!this.cycle) return;\n      this.slideTimeout = window.setTimeout(this.next, +this.interval > 0 ? +this.interval : 6000);\n    }\n  },\n  render: function render(h) {\n    var render = VWindow.options.render.call(this, h);\n    render.data.style = \"height: \".concat(convertToUnit(this.height), \";\");\n    /* istanbul ignore else */\n\n    if (!this.hideDelimiters) {\n      render.children.push(this.genDelimiters());\n    }\n    /* istanbul ignore else */\n\n    if (this.progress || this.progressColor) {\n      render.children.push(this.genProgress());\n    }\n    return render;\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}