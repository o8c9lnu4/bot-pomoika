{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\n// Style\nimport \"../../../src/components/VParallax/VParallax.sass\"; // Mixins\n\nimport Translatable from '../../mixins/translatable';\nimport mixins from '../../util/mixins';\nvar baseMixins = mixins(Translatable);\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-parallax',\n  props: {\n    alt: {\n      type: String,\n      \"default\": ''\n    },\n    height: {\n      type: [String, Number],\n      \"default\": 500\n    },\n    src: String,\n    srcset: String\n  },\n  data: function data() {\n    return {\n      isBooted: false\n    };\n  },\n  computed: {\n    styles: function styles() {\n      return {\n        display: 'block',\n        opacity: this.isBooted ? 1 : 0,\n        transform: \"translate(-50%, \".concat(this.parallax, \"px)\")\n      };\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  methods: {\n    init: function init() {\n      var _this = this;\n      var img = this.$refs.img;\n      if (!img) return;\n      if (img.complete) {\n        this.translate();\n        this.listeners();\n      } else {\n        img.addEventListener('load', function () {\n          _this.translate();\n          _this.listeners();\n        }, false);\n      }\n      this.isBooted = true;\n    },\n    objHeight: function objHeight() {\n      return this.$refs.img.naturalHeight;\n    }\n  },\n  render: function render(h) {\n    var imgData = {\n      staticClass: 'v-parallax__image',\n      style: this.styles,\n      attrs: {\n        src: this.src,\n        srcset: this.srcset,\n        alt: this.alt\n      },\n      ref: 'img'\n    };\n    var container = h('div', {\n      staticClass: 'v-parallax__image-container'\n    }, [h('img', imgData)]);\n    var content = h('div', {\n      staticClass: 'v-parallax__content'\n    }, this.$slots[\"default\"]);\n    return h('div', {\n      staticClass: 'v-parallax',\n      style: {\n        height: \"\".concat(this.height, \"px\")\n      },\n      on: this.$listeners\n    }, [container, content]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}