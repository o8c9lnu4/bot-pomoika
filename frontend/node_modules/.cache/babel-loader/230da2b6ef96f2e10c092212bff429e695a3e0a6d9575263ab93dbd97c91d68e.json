{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n// Components\nimport VOverlay from '../../components/VOverlay'; // Utilities\n\nimport { keyCodes, addOnceEventListener, addPassiveEventListener, getZIndex, composedPath } from '../../util/helpers'; // Types\n\nimport Vue from 'vue';\n/* @vue/component */\n\nexport default Vue.extend().extend({\n  name: 'overlayable',\n  props: {\n    hideOverlay: Boolean,\n    overlayColor: String,\n    overlayOpacity: [Number, String]\n  },\n  data: function data() {\n    return {\n      animationFrame: 0,\n      overlay: null\n    };\n  },\n  watch: {\n    hideOverlay: function hideOverlay(value) {\n      if (!this.isActive) return;\n      if (value) this.removeOverlay();else this.genOverlay();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.removeOverlay();\n  },\n  methods: {\n    createOverlay: function createOverlay() {\n      var overlay = new VOverlay({\n        propsData: {\n          absolute: this.absolute,\n          value: false,\n          color: this.overlayColor,\n          opacity: this.overlayOpacity\n        }\n      });\n      overlay.$mount();\n      var parent = this.absolute ? this.$el.parentNode : document.querySelector('[data-app]');\n      parent && parent.insertBefore(overlay.$el, parent.firstChild);\n      this.overlay = overlay;\n    },\n    genOverlay: function genOverlay() {\n      var _this = this;\n      this.hideScroll();\n      if (this.hideOverlay) return;\n      if (!this.overlay) this.createOverlay();\n      this.animationFrame = requestAnimationFrame(function () {\n        if (!_this.overlay) return;\n        if (_this.activeZIndex !== undefined) {\n          _this.overlay.zIndex = String(_this.activeZIndex - 1);\n        } else if (_this.$el) {\n          _this.overlay.zIndex = getZIndex(_this.$el);\n        }\n        _this.overlay.value = true;\n      });\n      return true;\n    },\n    /** removeOverlay(false) will not restore the scollbar afterwards */removeOverlay: function removeOverlay() {\n      var _this2 = this;\n      var showScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (this.overlay) {\n        addOnceEventListener(this.overlay.$el, 'transitionend', function () {\n          if (!_this2.overlay || !_this2.overlay.$el || !_this2.overlay.$el.parentNode || _this2.overlay.value || _this2.isActive) return;\n          _this2.overlay.$el.parentNode.removeChild(_this2.overlay.$el);\n          _this2.overlay.$destroy();\n          _this2.overlay = null;\n        }); // Cancel animation frame in case\n        // overlay is removed before it\n        // has finished its animation\n\n        cancelAnimationFrame(this.animationFrame);\n        this.overlay.value = false;\n      }\n      showScroll && this.showScroll();\n    },\n    scrollListener: function scrollListener(e) {\n      if ('key' in e) {\n        if (['INPUT', 'TEXTAREA', 'SELECT'].includes(e.target.tagName) ||\n        // https://github.com/vuetifyjs/vuetify/issues/4715\n        e.target.isContentEditable) return;\n        var up = [keyCodes.up, keyCodes.pageup];\n        var down = [keyCodes.down, keyCodes.pagedown];\n        if (up.includes(e.keyCode)) {\n          e.deltaY = -1;\n        } else if (down.includes(e.keyCode)) {\n          e.deltaY = 1;\n        } else {\n          return;\n        }\n      }\n      if (e.target === this.overlay || e.type !== 'keydown' && e.target === document.body || this.checkPath(e)) e.preventDefault();\n    },\n    hasScrollbar: function hasScrollbar(el) {\n      if (!el || el.nodeType !== Node.ELEMENT_NODE) return false;\n      var style = window.getComputedStyle(el);\n      return (['auto', 'scroll'].includes(style.overflowY) || el.tagName === 'SELECT') && el.scrollHeight > el.clientHeight || ['auto', 'scroll'].includes(style.overflowX) && el.scrollWidth > el.clientWidth;\n    },\n    shouldScroll: function shouldScroll(el, e) {\n      if (el.hasAttribute('data-app')) return false;\n      var dir = e.shiftKey || e.deltaX ? 'x' : 'y';\n      var delta = dir === 'y' ? e.deltaY : e.deltaX || e.deltaY;\n      var alreadyAtStart;\n      var alreadyAtEnd;\n      if (dir === 'y') {\n        alreadyAtStart = el.scrollTop === 0;\n        alreadyAtEnd = el.scrollTop + el.clientHeight === el.scrollHeight;\n      } else {\n        alreadyAtStart = el.scrollLeft === 0;\n        alreadyAtEnd = el.scrollLeft + el.clientWidth === el.scrollWidth;\n      }\n      var scrollingUp = delta < 0;\n      var scrollingDown = delta > 0;\n      if (!alreadyAtStart && scrollingUp) return true;\n      if (!alreadyAtEnd && scrollingDown) return true;\n      if (alreadyAtStart || alreadyAtEnd) {\n        return this.shouldScroll(el.parentNode, e);\n      }\n      return false;\n    },\n    isInside: function isInside(el, parent) {\n      if (el === parent) {\n        return true;\n      } else if (el === null || el === document.body) {\n        return false;\n      } else {\n        return this.isInside(el.parentNode, parent);\n      }\n    },\n    checkPath: function checkPath(e) {\n      var path = composedPath(e);\n      if (e.type === 'keydown' && path[0] === document.body) {\n        var dialog = this.$refs.dialog; // getSelection returns null in firefox in some edge cases, can be ignored\n\n        var selected = window.getSelection().anchorNode;\n        if (dialog && this.hasScrollbar(dialog) && this.isInside(selected, dialog)) {\n          return !this.shouldScroll(dialog, e);\n        }\n        return true;\n      }\n      for (var index = 0; index < path.length; index++) {\n        var el = path[index];\n        if (el === document) return true;\n        if (el === document.documentElement) return true;\n        if (el === this.$refs.content) return true;\n        if (this.hasScrollbar(el)) return !this.shouldScroll(el, e);\n      }\n      return true;\n    },\n    hideScroll: function hideScroll() {\n      if (this.$vuetify.breakpoint.smAndDown) {\n        document.documentElement.classList.add('overflow-y-hidden');\n      } else {\n        addPassiveEventListener(window, 'wheel', this.scrollListener, {\n          passive: false\n        });\n        window.addEventListener('keydown', this.scrollListener);\n      }\n    },\n    showScroll: function showScroll() {\n      document.documentElement.classList.remove('overflow-y-hidden');\n      window.removeEventListener('wheel', this.scrollListener);\n      window.removeEventListener('keydown', this.scrollListener);\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}